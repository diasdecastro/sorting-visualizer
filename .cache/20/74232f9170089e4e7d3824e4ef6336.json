{"id":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../util/comparator","loc":{"line":2,"column":25},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\sorting\\bubble_sort.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\util\\comparator.js"}],"generated":{"js":"'use strict';\nvar Comparator = require('../../util/comparator');\n\n/**\n * Bubble sort algorithm O(n^2)\n */\nvar bubbleSort = function (a, comparatorFn) {\n  var comparator = new Comparator(comparatorFn);\n  var n = a.length;\n  var bound = n - 1;\n  var check = false;\n  for (var i = 0; i < n - 1; i++) {\n    var newbound = 0;\n    for (var j = 0; j < bound; j++) {\n      if (comparator.greaterThan(a[j], a[j + 1])) {\n        var tmp = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = tmp;\n        newbound = j;\n        check = true;\n      }\n    }\n    if (!check)\n      return a;\n    bound = newbound;\n  }\n  return a;\n};\n\nmodule.exports = bubbleSort;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/bubble_sort.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}}],"sources":{"node_modules/algorithms/algorithms/sorting/bubble_sort.js":"'use strict';\nvar Comparator = require('../../util/comparator');\n\n/**\n * Bubble sort algorithm O(n^2)\n */\nvar bubbleSort = function (a, comparatorFn) {\n  var comparator = new Comparator(comparatorFn);\n  var n = a.length;\n  var bound = n - 1;\n  var check = false;\n  for (var i = 0; i < n - 1; i++) {\n    var newbound = 0;\n    for (var j = 0; j < bound; j++) {\n      if (comparator.greaterThan(a[j], a[j + 1])) {\n        var tmp = a[j];\n        a[j] = a[j + 1];\n        a[j + 1] = tmp;\n        newbound = j;\n        check = true;\n      }\n    }\n    if (!check)\n      return a;\n    bound = newbound;\n  }\n  return a;\n};\n\nmodule.exports = bubbleSort;\n"},"lineCount":31}},"error":null,"hash":"8e095a36bae17de7d198c4183a9951bd","cacheData":{"env":{}}}