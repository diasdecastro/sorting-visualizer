{"id":"node_modules/algorithms/algorithms/math/primality_tests.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n/**\n* Checks whether a number is prime using a given primality test\n*\n* @param Function\n* @param Number\n*\n* @return Boolean\n*/\nvar genericPrimalityTest = function (primalityTest, n) {\n  if (n <= 1) {\n    return false;\n  }\n  return primalityTest(n);\n};\n\n/**\n* Checks whether a number is prime using the naive algorithm O(n)\n*\n* @param Number\n*\n* @return Boolean\n*/\nvar naiveTest = function (n) {\n  for (var i = 2; i < n; ++i) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n* Checks whether a number is prime using the trial divison algorithm O(sqrt(n))\n*\n* @param Number\n*\n* @return Boolean\n*/\nvar trialDivisionTest = function (n) {\n  var sqrt = Math.sqrt(n);\n  for (var i = 2; i <= sqrt; ++i) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  naiveTest: genericPrimalityTest.bind(null, naiveTest),\n  trialDivisionTest: genericPrimalityTest.bind(null, trialDivisionTest)\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/algorithms/math/primality_tests.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}}],"sources":{"node_modules/algorithms/algorithms/math/primality_tests.js":"'use strict';\n\n/**\n* Checks whether a number is prime using a given primality test\n*\n* @param Function\n* @param Number\n*\n* @return Boolean\n*/\nvar genericPrimalityTest = function (primalityTest, n) {\n  if (n <= 1) {\n    return false;\n  }\n  return primalityTest(n);\n};\n\n/**\n* Checks whether a number is prime using the naive algorithm O(n)\n*\n* @param Number\n*\n* @return Boolean\n*/\nvar naiveTest = function (n) {\n  for (var i = 2; i < n; ++i) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n* Checks whether a number is prime using the trial divison algorithm O(sqrt(n))\n*\n* @param Number\n*\n* @return Boolean\n*/\nvar trialDivisionTest = function (n) {\n  var sqrt = Math.sqrt(n);\n  for (var i = 2; i <= sqrt; ++i) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  naiveTest: genericPrimalityTest.bind(null, naiveTest),\n  trialDivisionTest: genericPrimalityTest.bind(null, trialDivisionTest)\n};\n"},"lineCount":55}},"error":null,"hash":"c113e71376fc2c08cac7736415667903","cacheData":{"env":{}}}