{"id":"node_modules/algorithms/data_structures/set.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"./hash_table","loc":{"line":3,"column":24},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\set.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\hash_table.js"}],"generated":{"js":"'use strict';\n\nvar HashTable = require('./hash_table');\n\n/**\n * Typical representation of a mathematical set\n * No restriction on element types\n *   i.e. set.add(1,'a', \"b\", { \"foo\" : \"bar\" })\n */\nvar HashSet = function () {\n  this._elements = new HashTable(arguments.length);\n  this.add.apply(this, arguments);\n\n  Object.defineProperty(this, 'size', {\n    get: function () {\n      return this._elements.size;\n    }\n  });\n};\n\nHashSet.prototype.add = function () {\n  for (var i = 0; i < arguments.length; i++) {\n    this._elements.put(arguments[i], true);\n  }\n  return this;\n};\n\nHashSet.prototype.remove = function () {\n  for (var i = 0; i < arguments.length; i++) {\n    this._elements.del(arguments[i]);\n  }\n  return this;\n};\n\nHashSet.prototype.contains = function (e) {\n  return this._elements.get(e) !== undefined;\n};\n\nHashSet.prototype.forEach = function (fn) {\n  this._elements.forEach(fn);\n};\n\nmodule.exports = HashSet;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/data_structures/set.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}}],"sources":{"node_modules/algorithms/data_structures/set.js":"'use strict';\n\nvar HashTable = require('./hash_table');\n\n/**\n * Typical representation of a mathematical set\n * No restriction on element types\n *   i.e. set.add(1,'a', \"b\", { \"foo\" : \"bar\" })\n */\nvar HashSet = function () {\n  this._elements = new HashTable(arguments.length);\n  this.add.apply(this, arguments);\n\n  Object.defineProperty(this, 'size', {\n    get: function () {\n      return this._elements.size;\n    }\n  });\n};\n\nHashSet.prototype.add = function () {\n  for (var i = 0; i < arguments.length; i++) {\n    this._elements.put(arguments[i], true);\n  }\n  return this;\n};\n\nHashSet.prototype.remove = function () {\n  for (var i = 0; i < arguments.length; i++) {\n    this._elements.del(arguments[i]);\n  }\n  return this;\n};\n\nHashSet.prototype.contains = function (e) {\n  return this._elements.get(e) !== undefined;\n};\n\nHashSet.prototype.forEach = function (fn) {\n  this._elements.forEach(fn);\n};\n\nmodule.exports = HashSet;\n"},"lineCount":44}},"error":null,"hash":"11ecfc6a177ba659b5f51da9dc9cd3a2","cacheData":{"env":{}}}