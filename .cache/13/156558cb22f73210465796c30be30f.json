{"id":"node_modules/algorithms/algorithms/search/ternary_search.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n/**\n  *  Finds the maximum of unimodal function fn() within [left, right]\n  *  To find the minimum, revert the if/else statement or revert the comparison.\n  *  Time complexity: O(log(n))\n  */\n\nvar ternarySearch = function (fn, left, right, precision) {\n  while (Math.abs(right - left) > precision) {\n    var leftThird = left + (right - left) / 3,\n        rightThird = right - (right - left) / 3;\n\n    if (fn(leftThird) < fn(rightThird))\n      left = leftThird; else\n      right = rightThird;\n  }\n  return (left + right) / 2;\n};\n\nmodule.exports = ternarySearch;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/search/ternary_search.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}}],"sources":{"node_modules/algorithms/algorithms/search/ternary_search.js":"'use strict';\n\n/**\n  *  Finds the maximum of unimodal function fn() within [left, right]\n  *  To find the minimum, revert the if/else statement or revert the comparison.\n  *  Time complexity: O(log(n))\n  */\n\nvar ternarySearch = function (fn, left, right, precision) {\n  while (Math.abs(right - left) > precision) {\n    var leftThird = left + (right - left) / 3,\n        rightThird = right - (right - left) / 3;\n\n    if (fn(leftThird) < fn(rightThird))\n      left = leftThird; else\n      right = rightThird;\n  }\n  return (left + right) / 2;\n};\n\nmodule.exports = ternarySearch;\n"},"lineCount":22}},"error":null,"hash":"ee980f6e3593a08a7e5c2e747af12c83","cacheData":{"env":{}}}