{"id":"node_modules/algorithms/algorithms/math/gcd.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n/**\n * Euclidean algorithm to calculate the Greatest Common Divisor (GCD)\n *\n * @param Number\n * @param Number\n *\n * @return Number\n */\nvar gcdDivisionBased = function (a, b) {\n  var tmp = a;\n  a = Math.max(a, b);\n  b = Math.min(tmp, b);\n  while (b !== 0) {\n    tmp = b;\n    b = a % b;\n    a = tmp;\n  }\n\n  return a;\n};\n\n/**\n * Binary GCD algorithm (Stein's Algorithm)\n *\n * @link https://en.wikipedia.org/wiki/Binary_GCD_algorithm\n * This is basically a js version of the c implementation on Wikipedia\n *\n * @param Number\n * @param Number\n *\n * @return Number\n */\nvar gcdBinaryIterative = function (a, b) {\n\n  // GCD(0,b) == b; GCD(a,0) == a, GCD(0,0) == 0\n  if (a === 0) {\n    return b;\n  }\n\n  if (b === 0) {\n    return a;\n  }\n\n  var shift;\n  // Let shift = log(K), where K is the greatest power of 2\n  // dividing both a and b\n  for (shift = 0; ((a | b) & 1) === 0; ++shift) {\n    a >>= 1;\n    b >>= 1;\n  }\n\n  // Remove all factors of 2 in a -- they are not common\n  // Note: a is not zero, so while will terminate\n  while ((a & 1) === 0) {\n    a >>= 1;\n  }\n\n  var tmp;\n\n  // From here on, a is always odd\n  do {\n    // Remove all factors of 2 in b -- they are not common\n    // Note: b is not zero, so while will terminate\n    while ((b & 1) === 0) {\n      b >>= 1;\n    }\n\n    // Now a and b are both odd. Swap if necessary so a <= b,\n    // then set b = b - a (which is even).\n    if (a > b) {\n      tmp = b;\n      b = a;\n      a = tmp;\n    }\n\n    b -= a;  // Here b >= a\n  } while (b !== 0);\n\n  // restore common factors of 2\n  return a << shift;\n};\n\ngcdDivisionBased.binary = gcdBinaryIterative;\nmodule.exports = gcdDivisionBased;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/algorithms/math/gcd.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}}],"sources":{"node_modules/algorithms/algorithms/math/gcd.js":"'use strict';\n\n/**\n * Euclidean algorithm to calculate the Greatest Common Divisor (GCD)\n *\n * @param Number\n * @param Number\n *\n * @return Number\n */\nvar gcdDivisionBased = function (a, b) {\n  var tmp = a;\n  a = Math.max(a, b);\n  b = Math.min(tmp, b);\n  while (b !== 0) {\n    tmp = b;\n    b = a % b;\n    a = tmp;\n  }\n\n  return a;\n};\n\n/**\n * Binary GCD algorithm (Stein's Algorithm)\n *\n * @link https://en.wikipedia.org/wiki/Binary_GCD_algorithm\n * This is basically a js version of the c implementation on Wikipedia\n *\n * @param Number\n * @param Number\n *\n * @return Number\n */\nvar gcdBinaryIterative = function (a, b) {\n\n  // GCD(0,b) == b; GCD(a,0) == a, GCD(0,0) == 0\n  if (a === 0) {\n    return b;\n  }\n\n  if (b === 0) {\n    return a;\n  }\n\n  var shift;\n  // Let shift = log(K), where K is the greatest power of 2\n  // dividing both a and b\n  for (shift = 0; ((a | b) & 1) === 0; ++shift) {\n    a >>= 1;\n    b >>= 1;\n  }\n\n  // Remove all factors of 2 in a -- they are not common\n  // Note: a is not zero, so while will terminate\n  while ((a & 1) === 0) {\n    a >>= 1;\n  }\n\n  var tmp;\n\n  // From here on, a is always odd\n  do {\n    // Remove all factors of 2 in b -- they are not common\n    // Note: b is not zero, so while will terminate\n    while ((b & 1) === 0) {\n      b >>= 1;\n    }\n\n    // Now a and b are both odd. Swap if necessary so a <= b,\n    // then set b = b - a (which is even).\n    if (a > b) {\n      tmp = b;\n      b = a;\n      a = tmp;\n    }\n\n    b -= a;  // Here b >= a\n  } while (b !== 0);\n\n  // restore common factors of 2\n  return a << shift;\n};\n\ngcdDivisionBased.binary = gcdBinaryIterative;\nmodule.exports = gcdDivisionBased;\n"},"lineCount":87}},"error":null,"hash":"ac11f30db05c4c9a679c74cbbcb7dfb6","cacheData":{"env":{}}}