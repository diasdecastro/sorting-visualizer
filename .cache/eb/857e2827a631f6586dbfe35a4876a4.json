{"id":"node_modules/algorithms/algorithms/math/lcm.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"./gcd.js","loc":{"line":3,"column":18},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\math\\lcm.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\math\\gcd.js"}],"generated":{"js":"'use strict';\n\nvar gcd = require('./gcd.js');\n\n/**\n * Calcule the Least Common Multiple with a given Greatest Common Denominator\n * function\n *\n * @param Number\n * @param Number\n * @param Function\n *\n * @return Number\n */\nvar genericLCM = function (gcdFunction, a, b) {\n   if (a === 0 || b === 0) {\n    return 0;\n  }\n  a = Math.abs(a);\n  b = Math.abs(b);\n  return a / gcdFunction(a, b) * b;\n};\n\n/**\n * Algorithm to calculate Least Common Multiple based on Euclidean algorithm\n * calls the generic LCM function passing the division based GCD calculator\n *\n * @param Number\n * @param Number\n *\n * @return Number\n */\nvar lcmDivisionBased = genericLCM.bind(null, gcd);\n\n/**\n * Algorithm to calculate Least Common Multiple based on Stein's Algorithm\n * calls the generic LCM function passing the binary interative GCD calculator\n *\n * @param Number\n * @param Number\n *\n * @return Number\n */\nvar lcmBinaryIterative = genericLCM.bind(null, gcd.binary);\n\nvar lcm = lcmDivisionBased;\nlcm.binary = lcmBinaryIterative;\nmodule.exports = lcm;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/math/lcm.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}}],"sources":{"node_modules/algorithms/algorithms/math/lcm.js":"'use strict';\n\nvar gcd = require('./gcd.js');\n\n/**\n * Calcule the Least Common Multiple with a given Greatest Common Denominator\n * function\n *\n * @param Number\n * @param Number\n * @param Function\n *\n * @return Number\n */\nvar genericLCM = function (gcdFunction, a, b) {\n   if (a === 0 || b === 0) {\n    return 0;\n  }\n  a = Math.abs(a);\n  b = Math.abs(b);\n  return a / gcdFunction(a, b) * b;\n};\n\n/**\n * Algorithm to calculate Least Common Multiple based on Euclidean algorithm\n * calls the generic LCM function passing the division based GCD calculator\n *\n * @param Number\n * @param Number\n *\n * @return Number\n */\nvar lcmDivisionBased = genericLCM.bind(null, gcd);\n\n/**\n * Algorithm to calculate Least Common Multiple based on Stein's Algorithm\n * calls the generic LCM function passing the binary interative GCD calculator\n *\n * @param Number\n * @param Number\n *\n * @return Number\n */\nvar lcmBinaryIterative = genericLCM.bind(null, gcd.binary);\n\nvar lcm = lcmDivisionBased;\nlcm.binary = lcmBinaryIterative;\nmodule.exports = lcm;\n"},"lineCount":49}},"error":null,"hash":"2a4922aeec51b581d5870a11c468af64","cacheData":{"env":{}}}