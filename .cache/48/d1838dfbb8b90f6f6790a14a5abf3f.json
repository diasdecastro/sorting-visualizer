{"id":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n\n/**\n * Floyd-Warshall algorithm.\n * Compute all-pairs shortest paths (a path for each pair of vertices).\n * Complexity: O(V^3).\n *\n * @param {Graph} graph\n * @return {{distance, path}}\n */\nvar floydWarshall = function (graph) {\n\n  // Fill in the distances with initial values:\n  //   - 0 if source == destination;\n  //   - edge(source, destination) if there is a direct edge;\n  //   - +inf otherwise.\n  var distance = Object.create(null);\n  graph.vertices.forEach(function (src) {\n    distance[src] = Object.create(null);\n    graph.vertices.forEach(function (dest) {\n      if (src === dest) {\n        distance[src][dest] = 0;\n      } else if (graph.edge(src, dest) !== undefined) {\n        distance[src][dest] = graph.edge(src, dest);\n      } else {\n        distance[src][dest] = Infinity;\n      }\n    });\n  });\n\n  // Internal vertex with the largest index along the shortest path.\n  // Needed for path reconstruction.\n  var middleVertex = Object.create(null);\n  graph.vertices.forEach(function (vertex) {\n    middleVertex[vertex] = Object.create(null);\n  });\n\n  graph.vertices.forEach(function (middle) {\n    graph.vertices.forEach(function (src) {\n      graph.vertices.forEach(function (dest) {\n        var dist = distance[src][middle] + distance[middle][dest];\n        if (dist < distance[src][dest]) {\n          distance[src][dest] = dist;\n          middleVertex[src][dest] = middle;\n        }\n      });\n    });\n  });\n\n  // Check for a negative-weighted cycle.\n  graph.vertices.forEach(function (vertex) {\n    if (distance[vertex][vertex] < 0) {\n      // Negative-weighted cycle found.\n      throw new Error('The graph contains a negative-weighted cycle!');\n    }\n  });\n\n  /**\n   * Reconstruct the shortest path for a given pair of end vertices.\n   * Complexity: O(L), L - length of the path (number of edges).\n   *\n   * @param {string} srce\n   * @param {string} dest\n   * @return {?string[]} Null if destination is unreachable.\n   */\n  var path = function (src, dest) {\n    if (!Number.isFinite(distance[src][dest])) {\n      // dest unreachable.\n      return null;\n    }\n\n    var path = [src];\n\n    if (src !== dest) {\n      (function pushInOrder(src, dest) {\n        if (middleVertex[src][dest] === undefined) {\n          path.push(dest);\n        } else {\n          var middle = middleVertex[src][dest];\n          pushInOrder(src, middle);\n          pushInOrder(middle, dest);\n        }\n      })(src, dest);\n    }\n\n    return path;\n  };\n\n  return {\n    distance: distance,\n    path: path\n  };\n};\n\n\nmodule.exports = floydWarshall;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/floyd_warshall.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}}],"sources":{"node_modules/algorithms/algorithms/graph/floyd_warshall.js":"'use strict';\n\n\n/**\n * Floyd-Warshall algorithm.\n * Compute all-pairs shortest paths (a path for each pair of vertices).\n * Complexity: O(V^3).\n *\n * @param {Graph} graph\n * @return {{distance, path}}\n */\nvar floydWarshall = function (graph) {\n\n  // Fill in the distances with initial values:\n  //   - 0 if source == destination;\n  //   - edge(source, destination) if there is a direct edge;\n  //   - +inf otherwise.\n  var distance = Object.create(null);\n  graph.vertices.forEach(function (src) {\n    distance[src] = Object.create(null);\n    graph.vertices.forEach(function (dest) {\n      if (src === dest) {\n        distance[src][dest] = 0;\n      } else if (graph.edge(src, dest) !== undefined) {\n        distance[src][dest] = graph.edge(src, dest);\n      } else {\n        distance[src][dest] = Infinity;\n      }\n    });\n  });\n\n  // Internal vertex with the largest index along the shortest path.\n  // Needed for path reconstruction.\n  var middleVertex = Object.create(null);\n  graph.vertices.forEach(function (vertex) {\n    middleVertex[vertex] = Object.create(null);\n  });\n\n  graph.vertices.forEach(function (middle) {\n    graph.vertices.forEach(function (src) {\n      graph.vertices.forEach(function (dest) {\n        var dist = distance[src][middle] + distance[middle][dest];\n        if (dist < distance[src][dest]) {\n          distance[src][dest] = dist;\n          middleVertex[src][dest] = middle;\n        }\n      });\n    });\n  });\n\n  // Check for a negative-weighted cycle.\n  graph.vertices.forEach(function (vertex) {\n    if (distance[vertex][vertex] < 0) {\n      // Negative-weighted cycle found.\n      throw new Error('The graph contains a negative-weighted cycle!');\n    }\n  });\n\n  /**\n   * Reconstruct the shortest path for a given pair of end vertices.\n   * Complexity: O(L), L - length of the path (number of edges).\n   *\n   * @param {string} srce\n   * @param {string} dest\n   * @return {?string[]} Null if destination is unreachable.\n   */\n  var path = function (src, dest) {\n    if (!Number.isFinite(distance[src][dest])) {\n      // dest unreachable.\n      return null;\n    }\n\n    var path = [src];\n\n    if (src !== dest) {\n      (function pushInOrder(src, dest) {\n        if (middleVertex[src][dest] === undefined) {\n          path.push(dest);\n        } else {\n          var middle = middleVertex[src][dest];\n          pushInOrder(src, middle);\n          pushInOrder(middle, dest);\n        }\n      })(src, dest);\n    }\n\n    return path;\n  };\n\n  return {\n    distance: distance,\n    path: path\n  };\n};\n\n\nmodule.exports = floydWarshall;\n"},"lineCount":98}},"error":null,"hash":"4d77a1f6b19edce6380ddcf7590a7acf","cacheData":{"env":{}}}