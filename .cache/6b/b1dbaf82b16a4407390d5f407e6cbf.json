{"id":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n\n/**\n * Sample random elements from the array using reservoir algorithm.\n *\n * @param {Array} array\n * @param {number} sampleSize\n * @return {Array}\n */\nvar reservoirSampling = function (array, sampleSize) {\n  if (sampleSize > array.length) {\n    throw new Error('Sample size exceeds the total number of elements.');\n  }\n  var reservoir = array.slice(0, sampleSize);\n  for (var i = sampleSize; i < array.length; ++i) {\n    var j = Math.floor(Math.random() * (i + 1));\n    if (j < sampleSize) {\n      reservoir[j] = array[i];\n    }\n  }\n  return reservoir;\n};\n\n\nmodule.exports = reservoirSampling;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/math/reservoir_sampling.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"node_modules/algorithms/algorithms/math/reservoir_sampling.js":"'use strict';\n\n\n/**\n * Sample random elements from the array using reservoir algorithm.\n *\n * @param {Array} array\n * @param {number} sampleSize\n * @return {Array}\n */\nvar reservoirSampling = function (array, sampleSize) {\n  if (sampleSize > array.length) {\n    throw new Error('Sample size exceeds the total number of elements.');\n  }\n  var reservoir = array.slice(0, sampleSize);\n  for (var i = sampleSize; i < array.length; ++i) {\n    var j = Math.floor(Math.random() * (i + 1));\n    if (j < sampleSize) {\n      reservoir[j] = array[i];\n    }\n  }\n  return reservoir;\n};\n\n\nmodule.exports = reservoirSampling;\n"},"lineCount":27}},"error":null,"hash":"57ba4eea182303ec195006bd8a4315b3","cacheData":{"env":{}}}