{"id":"node_modules/algorithms/algorithms/graph/kruskal.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../data_structures/disjoint_set_forest","loc":{"line":3,"column":32},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\kruskal.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\disjoint_set_forest.js"},{"name":"../../data_structures/graph","loc":{"line":4,"column":20},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\kruskal.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\graph.js"}],"generated":{"js":"'use strict';\n\nvar DisjointSetForest = require('../../data_structures/disjoint_set_forest'),\n    Graph = require('../../data_structures/graph');\n\n\n/**\n * Kruskal's minimum spanning tree (forest) algorithm.\n * Complexity: O(E * log(V)).\n *\n * @param {Graph} graph - Undirected graph.\n * @return {Graph} Minimum spanning tree or forest\n *   (depending on whether input graph is connected itself).\n */\nvar kruskal = function (graph) {\n  if (graph.directed) {\n    throw new Error('Can\\'t build MST of a directed graph.');\n  }\n\n  var connectedComponents = new DisjointSetForest();\n  var mst = new Graph(false);\n  graph.vertices.forEach(mst.addVertex.bind(mst));\n\n  var edges = [];\n  graph.vertices.forEach(function (vertex) {\n    graph.neighbors(vertex).forEach(function (neighbor) {\n      // Compared as strings, loops intentionally omitted.\n      if (vertex < neighbor) {\n        edges.push({\n          ends: [vertex, neighbor],\n          weight: graph.edge(vertex, neighbor)\n        });\n      }\n    });\n  });\n\n  edges.sort(function (a, b) {\n    return a.weight - b.weight;\n  }).forEach(function (edge) {\n    if (!connectedComponents.sameSubset(edge.ends[0], edge.ends[1])) {\n      mst.addEdge(edge.ends[0], edge.ends[1], edge.weight);\n      connectedComponents.merge(edge.ends[0], edge.ends[1]);\n    }\n  });\n\n  return mst;\n};\n\n\nmodule.exports = kruskal;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/kruskal.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}}],"sources":{"node_modules/algorithms/algorithms/graph/kruskal.js":"'use strict';\n\nvar DisjointSetForest = require('../../data_structures/disjoint_set_forest'),\n    Graph = require('../../data_structures/graph');\n\n\n/**\n * Kruskal's minimum spanning tree (forest) algorithm.\n * Complexity: O(E * log(V)).\n *\n * @param {Graph} graph - Undirected graph.\n * @return {Graph} Minimum spanning tree or forest\n *   (depending on whether input graph is connected itself).\n */\nvar kruskal = function (graph) {\n  if (graph.directed) {\n    throw new Error('Can\\'t build MST of a directed graph.');\n  }\n\n  var connectedComponents = new DisjointSetForest();\n  var mst = new Graph(false);\n  graph.vertices.forEach(mst.addVertex.bind(mst));\n\n  var edges = [];\n  graph.vertices.forEach(function (vertex) {\n    graph.neighbors(vertex).forEach(function (neighbor) {\n      // Compared as strings, loops intentionally omitted.\n      if (vertex < neighbor) {\n        edges.push({\n          ends: [vertex, neighbor],\n          weight: graph.edge(vertex, neighbor)\n        });\n      }\n    });\n  });\n\n  edges.sort(function (a, b) {\n    return a.weight - b.weight;\n  }).forEach(function (edge) {\n    if (!connectedComponents.sameSubset(edge.ends[0], edge.ends[1])) {\n      mst.addEdge(edge.ends[0], edge.ends[1], edge.weight);\n      connectedComponents.merge(edge.ends[0], edge.ends[1]);\n    }\n  });\n\n  return mst;\n};\n\n\nmodule.exports = kruskal;\n"},"lineCount":51}},"error":null,"hash":"ecaa504976390cc6709fa245b521602f","cacheData":{"env":{}}}