{"id":"node_modules/algorithms/algorithms/math/next_permutation.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../util/comparator","loc":{"line":3,"column":25},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\math\\next_permutation.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\util\\comparator.js"}],"generated":{"js":"'use strict';\n\nvar Comparator = require('../../util/comparator');\n\n\n/**\n * Narayana's algorithm computes the subsequent permutation\n *   in lexicographical order.\n * Complexity: O(n).\n *\n * @param {Array} array\n * @param {function} [compareFn] - Custom compare function.\n * @return {boolean} Boolean flag indicating whether the algorithm succeeded,\n *   true unless the input permutation is lexicographically the last one.\n */\nvar nextPermutation = function (array, compareFn) {\n  if (!array.length) {\n    return false;\n  }\n  var cmp = new Comparator(compareFn);\n\n  // Find pivot and successor indices.\n  var pivot = array.length - 1;\n  while (pivot && cmp.greaterThanOrEqual(array[pivot - 1], array[pivot])) {\n    pivot -= 1;\n  }\n  if (!pivot) {\n    // Permutation is sorted in descending order.\n    return false;\n  }\n  var pivotValue = array[--pivot];\n  var successor = array.length - 1;\n  while (cmp.lessThanOrEqual(array[successor], pivotValue)) {\n    successor -= 1;\n  }\n\n  // Swap values.\n  array[pivot] = array[successor];\n  array[successor] = pivotValue;\n\n  // Reverse the descending part.\n  for (var left = pivot, right = array.length; ++left < --right;) {\n    var temp = array[left];\n    array[left] = array[right];\n    array[right] = temp;\n  }\n  return true;\n};\n\n\nmodule.exports = nextPermutation;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/math/next_permutation.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}}],"sources":{"node_modules/algorithms/algorithms/math/next_permutation.js":"'use strict';\n\nvar Comparator = require('../../util/comparator');\n\n\n/**\n * Narayana's algorithm computes the subsequent permutation\n *   in lexicographical order.\n * Complexity: O(n).\n *\n * @param {Array} array\n * @param {function} [compareFn] - Custom compare function.\n * @return {boolean} Boolean flag indicating whether the algorithm succeeded,\n *   true unless the input permutation is lexicographically the last one.\n */\nvar nextPermutation = function (array, compareFn) {\n  if (!array.length) {\n    return false;\n  }\n  var cmp = new Comparator(compareFn);\n\n  // Find pivot and successor indices.\n  var pivot = array.length - 1;\n  while (pivot && cmp.greaterThanOrEqual(array[pivot - 1], array[pivot])) {\n    pivot -= 1;\n  }\n  if (!pivot) {\n    // Permutation is sorted in descending order.\n    return false;\n  }\n  var pivotValue = array[--pivot];\n  var successor = array.length - 1;\n  while (cmp.lessThanOrEqual(array[successor], pivotValue)) {\n    successor -= 1;\n  }\n\n  // Swap values.\n  array[pivot] = array[successor];\n  array[successor] = pivotValue;\n\n  // Reverse the descending part.\n  for (var left = pivot, right = array.length; ++left < --right;) {\n    var temp = array[left];\n    array[left] = array[right];\n    array[right] = temp;\n  }\n  return true;\n};\n\n\nmodule.exports = nextPermutation;\n"},"lineCount":52}},"error":null,"hash":"011dd559670f555d4df4774ee36f6215","cacheData":{"env":{}}}