{"id":"node_modules/algorithms/algorithms/math/shannon_entropy.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n/**\n * Calculate Shannon Entropy of an array\n *\n * @param {Array} arr - An array of values.\n * @return Number\n */\nvar shannonEntropy = function (arr) {\n  // find the frequency of each value\n  var freqs = arr.reduce(function (acc, item) {\n    acc[item] = acc[item] + 1 || 1;\n    return acc;\n  }, {});\n\n  // find the probability of each value\n  var probs = Object.keys(freqs).map(function (key) {\n    return freqs[key] / arr.length;\n  });\n\n  // calulate the shannon entropy of the array\n  return probs.reduce(function (e, p) {\n    return e - p * Math.log(p);\n  }, 0) * Math.LOG2E;\n};\n\nmodule.exports = shannonEntropy;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/math/shannon_entropy.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"node_modules/algorithms/algorithms/math/shannon_entropy.js":"'use strict';\n\n/**\n * Calculate Shannon Entropy of an array\n *\n * @param {Array} arr - An array of values.\n * @return Number\n */\nvar shannonEntropy = function (arr) {\n  // find the frequency of each value\n  var freqs = arr.reduce(function (acc, item) {\n    acc[item] = acc[item] + 1 || 1;\n    return acc;\n  }, {});\n\n  // find the probability of each value\n  var probs = Object.keys(freqs).map(function (key) {\n    return freqs[key] / arr.length;\n  });\n\n  // calulate the shannon entropy of the array\n  return probs.reduce(function (e, p) {\n    return e - p * Math.log(p);\n  }, 0) * Math.LOG2E;\n};\n\nmodule.exports = shannonEntropy;\n"},"lineCount":28}},"error":null,"hash":"b91343ec986970c4f779c2afcc523ed4","cacheData":{"env":{}}}