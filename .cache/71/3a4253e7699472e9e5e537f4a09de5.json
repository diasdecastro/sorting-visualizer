{"id":"node_modules/algorithms/algorithms/sorting/quicksort.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../util/comparator","loc":{"line":2,"column":25},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\sorting\\quicksort.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\util\\comparator.js"}],"generated":{"js":"'use strict';\nvar Comparator = require('../../util/comparator');\n\n/**\n * Quicksort recursively sorts parts of the array in\n * O(n.lg n)\n */\nvar quicksortInit = function (array, comparatorFn) {\n\n  var comparator = new Comparator(comparatorFn);\n\n  return (function quicksort(array, lo, hi) {\n    while (lo < hi) {\n      var p = partition(array, comparator, lo, hi);\n      //Chooses only the smallest partition to use recursion on and\n      //tail-optimize the other. This guarantees O(log n) space in worst case.\n      if (p - lo < hi - p) {\n        quicksort(array, lo, p - 1);\n        lo = p + 1;\n      } else {\n        quicksort(array, p + 1, hi);\n        hi = p - 1;\n      }\n    }\n\n    return array;\n  })(array, 0, array.length - 1);\n};\n\n/**\n * Chooses a pivot and makes every element that is\n * lower than the pivot move to its left, and every\n * greater element moves to its right\n *\n * @return Number the positon of the pivot\n */\nvar partition = function (a, comparator, lo, hi) {\n  // pick a random element, swap with the rightmost and\n  // use it as pivot\n  swap(a, Math.floor(Math.random() * (hi - lo)) + lo, hi);\n  var pivot = hi;\n\n  // dividerPosition keeps track of the position\n  // where the pivot should be inserted\n  var dividerPosition = lo;\n\n  for (var i = lo; i < hi; i++) {\n    if (comparator.lessThan(a[i], a[pivot])) {\n      swap(a, i, dividerPosition);\n      dividerPosition++;\n    }\n  }\n  swap(a, dividerPosition, pivot);\n  return dividerPosition;\n};\n\n/**\n * Swaps two elements in the array\n */\nvar swap = function (array, x, y) {\n  var tmp = array[y];\n  array[y] = array[x];\n  array[x] = tmp;\n};\n\nmodule.exports = quicksortInit;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/quicksort.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}}],"sources":{"node_modules/algorithms/algorithms/sorting/quicksort.js":"'use strict';\nvar Comparator = require('../../util/comparator');\n\n/**\n * Quicksort recursively sorts parts of the array in\n * O(n.lg n)\n */\nvar quicksortInit = function (array, comparatorFn) {\n\n  var comparator = new Comparator(comparatorFn);\n\n  return (function quicksort(array, lo, hi) {\n    while (lo < hi) {\n      var p = partition(array, comparator, lo, hi);\n      //Chooses only the smallest partition to use recursion on and\n      //tail-optimize the other. This guarantees O(log n) space in worst case.\n      if (p - lo < hi - p) {\n        quicksort(array, lo, p - 1);\n        lo = p + 1;\n      } else {\n        quicksort(array, p + 1, hi);\n        hi = p - 1;\n      }\n    }\n\n    return array;\n  })(array, 0, array.length - 1);\n};\n\n/**\n * Chooses a pivot and makes every element that is\n * lower than the pivot move to its left, and every\n * greater element moves to its right\n *\n * @return Number the positon of the pivot\n */\nvar partition = function (a, comparator, lo, hi) {\n  // pick a random element, swap with the rightmost and\n  // use it as pivot\n  swap(a, Math.floor(Math.random() * (hi - lo)) + lo, hi);\n  var pivot = hi;\n\n  // dividerPosition keeps track of the position\n  // where the pivot should be inserted\n  var dividerPosition = lo;\n\n  for (var i = lo; i < hi; i++) {\n    if (comparator.lessThan(a[i], a[pivot])) {\n      swap(a, i, dividerPosition);\n      dividerPosition++;\n    }\n  }\n  swap(a, dividerPosition, pivot);\n  return dividerPosition;\n};\n\n/**\n * Swaps two elements in the array\n */\nvar swap = function (array, x, y) {\n  var tmp = array[y];\n  array[y] = array[x];\n  array[x] = tmp;\n};\n\nmodule.exports = quicksortInit;\n"},"lineCount":67}},"error":null,"hash":"982a00af9e156165cd883652a4ad5b16","cacheData":{"env":{}}}