{"id":"node_modules/algorithms/data_structures/stack.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"./queue","loc":{"line":3,"column":20},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\stack.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\queue.js"}],"generated":{"js":"'use strict';\n\nvar Queue = require('./queue');\n\n/**\n * Stack (LIFO) using a Linked List as basis\n */\nfunction Stack() {\n  Queue.call(this);\n}\n\n/**\n * Use a Queue as prototype and just overwrite\n * the push method to insert at the 0 position\n * instead of the end of the queue\n */\nStack.prototype = new Queue();\n\n/**\n * Adds element to the top of the stack\n */\nStack.prototype.push = function (e) {\n  this._elements.add(e, 0);\n};\n\nmodule.exports = Stack;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/data_structures/stack.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"node_modules/algorithms/data_structures/stack.js":"'use strict';\n\nvar Queue = require('./queue');\n\n/**\n * Stack (LIFO) using a Linked List as basis\n */\nfunction Stack() {\n  Queue.call(this);\n}\n\n/**\n * Use a Queue as prototype and just overwrite\n * the push method to insert at the 0 position\n * instead of the end of the queue\n */\nStack.prototype = new Queue();\n\n/**\n * Adds element to the top of the stack\n */\nStack.prototype.push = function (e) {\n  this._elements.add(e, 0);\n};\n\nmodule.exports = Stack;\n"},"lineCount":27}},"error":null,"hash":"258c4949edadcd55f5dde4d75a53e2f9","cacheData":{"env":{}}}