{"id":"node_modules/algorithms/data_structures/heap.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../util/comparator","loc":{"line":2,"column":25},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\heap.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\util\\comparator.js"}],"generated":{"js":"'use strict';\nvar Comparator = require('../util/comparator');\n\n/**\n * Basic Heap structure\n */\nfunction MinHeap(compareFn) {\n  this._elements = [null];\n  this._comparator = new Comparator(compareFn);\n\n  Object.defineProperty(this, 'n', {\n    get: function () {\n      return this._elements.length - 1;\n    }.bind(this)\n  });\n}\n\nMinHeap.prototype._swap = function (a, b) {\n  var tmp = this._elements[a];\n  this._elements[a] = this._elements[b];\n  this._elements[b] = tmp;\n};\n\nMinHeap.prototype.isEmpty = function () {\n  return this.n === 0;\n};\n\nMinHeap.prototype.insert = function (e) {\n  this._elements.push(e);\n  this._siftUp();\n};\n\nMinHeap.prototype.extract = function () {\n  var element = this._elements[1];\n\n  // Get the one from the bottom in insert it on top\n  // If this isn't already the last element\n  var last = this._elements.pop();\n  if (this.n) {\n    this._elements[1] = last;\n    this._siftDown();\n  }\n\n  return element;\n};\n\n/**\n * Sift up the last element\n * O(lg n)\n */\nMinHeap.prototype._siftUp = function () {\n  var i, parent;\n\n  for (i = this.n;\n      i > 1 && (parent = i >> 1) && this._comparator.greaterThan(\n        this._elements[parent], this._elements[i]);\n      i = parent) {\n    this._swap(parent, i);\n  }\n};\n\n/**\n * Sifts down the first element\n * O(lg n)\n */\nMinHeap.prototype._siftDown = function (i) {\n  var c;\n  for (i = i || 1; (c = i << 1) <= this.n; i = c) {\n    // checks which is the smaller child to compare with\n    if (c + 1 <= this.n && this._comparator.lessThan(\n          this._elements[c + 1], this._elements[c]))\n      // use the right child if it's lower than the left one\n      c++;\n    if (this._comparator.lessThan(this._elements[i],\n          this._elements[c]))\n      break;\n    this._swap(i, c);\n  }\n};\n\nMinHeap.prototype.heapify = function (a) {\n  if (a) {\n    this._elements = a;\n    this._elements.unshift(null);\n  }\n\n  for (var i = this.n >> 1; i > 0; i--) {\n    this._siftDown(i);\n  }\n};\n\nMinHeap.prototype.forEach = function (fn) {\n  // A copy is necessary in order to perform extract(),\n  // get the items in sorted order and then restore the original\n  // this._elements array\n  var elementsCopy = [];\n  var i;\n\n  for (i = 0; i < this._elements.length; i++) {\n    elementsCopy.push(this._elements[i]);\n  }\n\n  for (i = this.n; i > 0; i--) {\n    fn(this.extract());\n  }\n\n  this._elements = elementsCopy;\n};\n\n/**\n * Max Heap, keeps the highest element always on top\n *\n * To avoid code repetition, the Min Heap is used just with\n * a reverse comparator;\n */\nfunction MaxHeap(compareFn) {\n\n  MinHeap.call(this, compareFn);\n  this._comparator.reverse();\n}\n\nMaxHeap.prototype = new MinHeap();\n\nmodule.exports = {\n  MinHeap: MinHeap,\n  MaxHeap: MaxHeap\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/algorithms/data_structures/heap.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}}],"sources":{"node_modules/algorithms/data_structures/heap.js":"'use strict';\nvar Comparator = require('../util/comparator');\n\n/**\n * Basic Heap structure\n */\nfunction MinHeap(compareFn) {\n  this._elements = [null];\n  this._comparator = new Comparator(compareFn);\n\n  Object.defineProperty(this, 'n', {\n    get: function () {\n      return this._elements.length - 1;\n    }.bind(this)\n  });\n}\n\nMinHeap.prototype._swap = function (a, b) {\n  var tmp = this._elements[a];\n  this._elements[a] = this._elements[b];\n  this._elements[b] = tmp;\n};\n\nMinHeap.prototype.isEmpty = function () {\n  return this.n === 0;\n};\n\nMinHeap.prototype.insert = function (e) {\n  this._elements.push(e);\n  this._siftUp();\n};\n\nMinHeap.prototype.extract = function () {\n  var element = this._elements[1];\n\n  // Get the one from the bottom in insert it on top\n  // If this isn't already the last element\n  var last = this._elements.pop();\n  if (this.n) {\n    this._elements[1] = last;\n    this._siftDown();\n  }\n\n  return element;\n};\n\n/**\n * Sift up the last element\n * O(lg n)\n */\nMinHeap.prototype._siftUp = function () {\n  var i, parent;\n\n  for (i = this.n;\n      i > 1 && (parent = i >> 1) && this._comparator.greaterThan(\n        this._elements[parent], this._elements[i]);\n      i = parent) {\n    this._swap(parent, i);\n  }\n};\n\n/**\n * Sifts down the first element\n * O(lg n)\n */\nMinHeap.prototype._siftDown = function (i) {\n  var c;\n  for (i = i || 1; (c = i << 1) <= this.n; i = c) {\n    // checks which is the smaller child to compare with\n    if (c + 1 <= this.n && this._comparator.lessThan(\n          this._elements[c + 1], this._elements[c]))\n      // use the right child if it's lower than the left one\n      c++;\n    if (this._comparator.lessThan(this._elements[i],\n          this._elements[c]))\n      break;\n    this._swap(i, c);\n  }\n};\n\nMinHeap.prototype.heapify = function (a) {\n  if (a) {\n    this._elements = a;\n    this._elements.unshift(null);\n  }\n\n  for (var i = this.n >> 1; i > 0; i--) {\n    this._siftDown(i);\n  }\n};\n\nMinHeap.prototype.forEach = function (fn) {\n  // A copy is necessary in order to perform extract(),\n  // get the items in sorted order and then restore the original\n  // this._elements array\n  var elementsCopy = [];\n  var i;\n\n  for (i = 0; i < this._elements.length; i++) {\n    elementsCopy.push(this._elements[i]);\n  }\n\n  for (i = this.n; i > 0; i--) {\n    fn(this.extract());\n  }\n\n  this._elements = elementsCopy;\n};\n\n/**\n * Max Heap, keeps the highest element always on top\n *\n * To avoid code repetition, the Min Heap is used just with\n * a reverse comparator;\n */\nfunction MaxHeap(compareFn) {\n\n  MinHeap.call(this, compareFn);\n  this._comparator.reverse();\n}\n\nMaxHeap.prototype = new MinHeap();\n\nmodule.exports = {\n  MinHeap: MinHeap,\n  MaxHeap: MaxHeap\n};\n"},"lineCount":128}},"error":null,"hash":"89c4b83bf7bde496fac240547e0e0d33","cacheData":{"env":{}}}