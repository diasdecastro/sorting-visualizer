{"id":"node_modules/algorithms/algorithms/math/fibonacci.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"./fast_power","loc":{"line":7,"column":20},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\math\\fibonacci.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\math\\fast_power.js"}],"generated":{"js":"'use strict';\n\n/**\n * Different implementations of the Fibonacci sequence\n */\n\nvar power = require('./fast_power');\n\n/**\n  * Regular fibonacci implementation following the definition:\n  * Fib(0) = 0\n  * Fib(1) = 1\n  * Fib(n) = Fib(n-1) + Fib(n-2)\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibExponential = function (n) {\n  return n < 2 ? n : fibExponential(n - 1) + fibExponential(n - 2);\n};\n\n/**\n  * O(n) in time, O(1) in space and doesn't use recursion\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibLinear = function (n) {\n  var fibNMinus2 = 0,\n      fibNMinus1 = 1,\n      fib = n;\n  for (var i = 1; i < n; i++) {\n    fib = fibNMinus1 + fibNMinus2;\n    fibNMinus2 = fibNMinus1;\n    fibNMinus1 = fib;\n  }\n  return fib;\n};\n\n/**\n  * Implementation with memoization, O(n) in time, O(n) in space\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibWithMemoization = (function () {\n  var cache = [0, 1];\n\n  var fib = function (n) {\n    if (cache[n] === undefined) {\n      cache[n] = fib(n - 1) + fib(n - 2);\n    }\n    return cache[n];\n  };\n\n  return fib;\n})();\n\n/**\n  * Implementation using Binet's formula with the rounding trick.\n  * O(1) in time, O(1) in space\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibDirect = function (number) {\n  var phi = (1 + Math.sqrt(5)) / 2;\n  return Math.floor(Math.pow(phi, number) / Math.sqrt(5) + 0.5);\n};\n\n/**\n  * Implementation based on matrix exponentiation.\n  * O(log(n)) in time, O(1) in space\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibLogarithmic = function (number) {\n  // Transforms [f_1, f_0] to [f_2, f_1] and so on.\n  var nextFib = [[1, 1], [1, 0]];\n\n  var matrixMultiply = function (a, b) {\n    return [[a[0][0] * b[0][0] + a[0][1] * b[1][0],\n             a[0][0] * b[0][1] + a[0][1] * b[1][1]],\n            [a[1][0] * b[0][0] + a[1][1] * b[1][0],\n             a[1][0] * b[0][1] + a[1][1] * b[1][1]]];\n  };\n\n  var transform = power(nextFib, number, matrixMultiply, [[1, 0], [0, 1]]);\n\n  // [f_n, f_{n-1}] = Transform * [f_0, f_{-1}] = Transform * [0, 1]\n  // Hence the result is the first row of Transform multiplied by [0, 1],\n  // which is the same as transform[0][1].\n  return transform[0][1];\n};\n\n// Use fibLinear as the default implementation\nfibLinear.exponential = fibExponential;\nfibLinear.withMemoization = fibWithMemoization;\nfibLinear.direct = fibDirect;\nfibLinear.logarithmic = fibLogarithmic;\nmodule.exports = fibLinear;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fibonacci.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}}],"sources":{"node_modules/algorithms/algorithms/math/fibonacci.js":"'use strict';\n\n/**\n * Different implementations of the Fibonacci sequence\n */\n\nvar power = require('./fast_power');\n\n/**\n  * Regular fibonacci implementation following the definition:\n  * Fib(0) = 0\n  * Fib(1) = 1\n  * Fib(n) = Fib(n-1) + Fib(n-2)\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibExponential = function (n) {\n  return n < 2 ? n : fibExponential(n - 1) + fibExponential(n - 2);\n};\n\n/**\n  * O(n) in time, O(1) in space and doesn't use recursion\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibLinear = function (n) {\n  var fibNMinus2 = 0,\n      fibNMinus1 = 1,\n      fib = n;\n  for (var i = 1; i < n; i++) {\n    fib = fibNMinus1 + fibNMinus2;\n    fibNMinus2 = fibNMinus1;\n    fibNMinus1 = fib;\n  }\n  return fib;\n};\n\n/**\n  * Implementation with memoization, O(n) in time, O(n) in space\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibWithMemoization = (function () {\n  var cache = [0, 1];\n\n  var fib = function (n) {\n    if (cache[n] === undefined) {\n      cache[n] = fib(n - 1) + fib(n - 2);\n    }\n    return cache[n];\n  };\n\n  return fib;\n})();\n\n/**\n  * Implementation using Binet's formula with the rounding trick.\n  * O(1) in time, O(1) in space\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibDirect = function (number) {\n  var phi = (1 + Math.sqrt(5)) / 2;\n  return Math.floor(Math.pow(phi, number) / Math.sqrt(5) + 0.5);\n};\n\n/**\n  * Implementation based on matrix exponentiation.\n  * O(log(n)) in time, O(1) in space\n  *\n  * @param Number\n  * @return Number\n  */\nvar fibLogarithmic = function (number) {\n  // Transforms [f_1, f_0] to [f_2, f_1] and so on.\n  var nextFib = [[1, 1], [1, 0]];\n\n  var matrixMultiply = function (a, b) {\n    return [[a[0][0] * b[0][0] + a[0][1] * b[1][0],\n             a[0][0] * b[0][1] + a[0][1] * b[1][1]],\n            [a[1][0] * b[0][0] + a[1][1] * b[1][0],\n             a[1][0] * b[0][1] + a[1][1] * b[1][1]]];\n  };\n\n  var transform = power(nextFib, number, matrixMultiply, [[1, 0], [0, 1]]);\n\n  // [f_n, f_{n-1}] = Transform * [f_0, f_{-1}] = Transform * [0, 1]\n  // Hence the result is the first row of Transform multiplied by [0, 1],\n  // which is the same as transform[0][1].\n  return transform[0][1];\n};\n\n// Use fibLinear as the default implementation\nfibLinear.exponential = fibExponential;\nfibLinear.withMemoization = fibWithMemoization;\nfibLinear.direct = fibDirect;\nfibLinear.logarithmic = fibLogarithmic;\nmodule.exports = fibLinear;\n"},"lineCount":103}},"error":null,"hash":"1f2a2b50ee58a1074217365cf05181d3","cacheData":{"env":{}}}