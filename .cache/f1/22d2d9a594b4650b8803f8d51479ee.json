{"id":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../util/comparator","loc":{"line":3,"column":25},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\sorting\\short_bubble_sort.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\util\\comparator.js"}],"generated":{"js":"'use strict';\n\nvar Comparator = require('../../util/comparator');\n\n/**\n * short bubble sort algorithm\n * worst: O(n^2) best: O(n)\n */\n\nfunction shortBubbleSort(array, comparatorFn) {\n  var comparator = new Comparator(comparatorFn);\n  var length = array.length - 1;\n  var i = 0;\n\n  for (i; i < length; i++) {\n    var current = array[i];\n    var next = array[i+1];\n\n    /**\n     * If the current value if greater than the next:\n     * - set current value to next value;\n     * - and set next value to current value;\n     * - then reset iterator counter to rescan for values to be sorted.\n     */\n\n    if (comparator.greaterThan(current, next)) {\n      array[i+1] = current;\n      array[i] = next;\n      i = -1;\n    }\n  }\n\n  return array;\n}\n\nmodule.exports = shortBubbleSort;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}}],"sources":{"node_modules/algorithms/algorithms/sorting/short_bubble_sort.js":"'use strict';\n\nvar Comparator = require('../../util/comparator');\n\n/**\n * short bubble sort algorithm\n * worst: O(n^2) best: O(n)\n */\n\nfunction shortBubbleSort(array, comparatorFn) {\n  var comparator = new Comparator(comparatorFn);\n  var length = array.length - 1;\n  var i = 0;\n\n  for (i; i < length; i++) {\n    var current = array[i];\n    var next = array[i+1];\n\n    /**\n     * If the current value if greater than the next:\n     * - set current value to next value;\n     * - and set next value to current value;\n     * - then reset iterator counter to rescan for values to be sorted.\n     */\n\n    if (comparator.greaterThan(current, next)) {\n      array[i+1] = current;\n      array[i] = next;\n      i = -1;\n    }\n  }\n\n  return array;\n}\n\nmodule.exports = shortBubbleSort;\n"},"lineCount":37}},"error":null,"hash":"148ef392aec8eaf8645c3258ac57a049","cacheData":{"env":{}}}