{"id":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../util/comparator","loc":{"line":2,"column":25},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\sorting\\insertion_sort.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\util\\comparator.js"}],"generated":{"js":"'use strict';\nvar Comparator = require('../../util/comparator');\n\n/**\n * Insertion sort algorithm O(n + d)\n */\nvar insertionSort = function (vector, comparatorFn) {\n  var comparator = new Comparator(comparatorFn);\n\n  for (var i = 1, len = vector.length; i < len; i++) {\n    var aux = vector[i],\n      j = i;\n\n    while (j > 0 && comparator.lessThan(aux, vector[j - 1])) {\n      vector[j] = vector[j - 1];\n      j--;\n    }\n\n    vector[j] = aux;\n  }\n\n  return vector;\n};\n\nmodule.exports = insertionSort;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/sorting/insertion_sort.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}}],"sources":{"node_modules/algorithms/algorithms/sorting/insertion_sort.js":"'use strict';\nvar Comparator = require('../../util/comparator');\n\n/**\n * Insertion sort algorithm O(n + d)\n */\nvar insertionSort = function (vector, comparatorFn) {\n  var comparator = new Comparator(comparatorFn);\n\n  for (var i = 1, len = vector.length; i < len; i++) {\n    var aux = vector[i],\n      j = i;\n\n    while (j > 0 && comparator.lessThan(aux, vector[j - 1])) {\n      vector[j] = vector[j - 1];\n      j--;\n    }\n\n    vector[j] = aux;\n  }\n\n  return vector;\n};\n\nmodule.exports = insertionSort;\n"},"lineCount":26}},"error":null,"hash":"d2f8b7050b561977c9daa0cff97eed6f","cacheData":{"env":{}}}