{"id":"node_modules/algorithms/data_structures/disjoint_set_forest.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n/**\n * Disjoint Set Forest data structure.\n * Allows fast subset merging and querying.\n * New elements lie in their own one-element subsets by default.\n *\n * @constructor\n */\nfunction DisjointSetForest() {\n  this._parents = {};\n  this._ranks = {};\n  this._sizes = {};\n}\n\n\nDisjointSetForest.prototype._introduce = function (element) {\n  if (!(element in this._parents)) {\n    this._parents[element] = element;\n    this._ranks[element] = 0;\n    this._sizes[element] = 1;\n  }\n};\n\n\n/**\n * Check if the elements belong to the same subset.\n * Complexity: O(A^-1) (inverse Ackermann function) amortized.\n *\n * @param {...*} element\n * @return {boolean}\n */\nDisjointSetForest.prototype.sameSubset = function (element) {\n  this._introduce(element);\n  var root = this.root(element);\n  return [].slice.call(arguments, 1).every(function (element) {\n    this._introduce(element);\n    return this.root(element) === root;\n  }.bind(this));\n};\n\n\n/**\n * Return the root element which represents the given element's subset.\n * The result does not depend on the choice of the element,\n *   but rather on the subset itself.\n * Complexity: O(A^-1) (inverse Ackermann function) amortized.\n *\n * @param {*} element\n * @return {*}\n */\nDisjointSetForest.prototype.root = function (element) {\n  this._introduce(element);\n  if (this._parents[element] !== element) {\n    this._parents[element] = this.root(this._parents[element]);\n  }\n  return this._parents[element];\n};\n\n\n/**\n * Return the size of the given element's subset.\n * Complexity: O(A^-1) (inverse Ackermann function) amortized.\n *\n * @param {*} element\n * @return {number}\n */\nDisjointSetForest.prototype.size = function (element) {\n  this._introduce(element);\n  return this._sizes[this.root(element)];\n};\n\n\n/**\n * Merge subsets containing two (or more) given elements into one.\n * Complexity: O(A^-1) (inverse Ackermann function) amortized.\n *\n * @param {*} element1\n * @param {*} element2\n * @param {...*}\n * @return {DisjointSetForest}\n */\nDisjointSetForest.prototype.merge = function merge(element1, element2) {\n  if (arguments.length > 2) {\n    merge.apply(this, [].slice.call(arguments, 1));\n  }\n\n  this._introduce(element1);\n  this._introduce(element2);\n  var root1 = this.root(element1);\n  var root2 = this.root(element2);\n\n  if (this._ranks[root1] < this._ranks[root2]) {\n    this._parents[root1] = root2;\n    this._sizes[root2] += this._sizes[root1];\n  }\n  else if (root1 !== root2) {\n    this._parents[root2] = root1;\n    this._sizes[root1] += this._sizes[root2];\n    if (this._ranks[root1] === this._ranks[root2]) {\n      this._ranks[root1] += 1;\n    }\n  }\n  return this;\n};\n\n\nmodule.exports = DisjointSetForest;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/algorithms/data_structures/disjoint_set_forest.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}}],"sources":{"node_modules/algorithms/data_structures/disjoint_set_forest.js":"'use strict';\n\n/**\n * Disjoint Set Forest data structure.\n * Allows fast subset merging and querying.\n * New elements lie in their own one-element subsets by default.\n *\n * @constructor\n */\nfunction DisjointSetForest() {\n  this._parents = {};\n  this._ranks = {};\n  this._sizes = {};\n}\n\n\nDisjointSetForest.prototype._introduce = function (element) {\n  if (!(element in this._parents)) {\n    this._parents[element] = element;\n    this._ranks[element] = 0;\n    this._sizes[element] = 1;\n  }\n};\n\n\n/**\n * Check if the elements belong to the same subset.\n * Complexity: O(A^-1) (inverse Ackermann function) amortized.\n *\n * @param {...*} element\n * @return {boolean}\n */\nDisjointSetForest.prototype.sameSubset = function (element) {\n  this._introduce(element);\n  var root = this.root(element);\n  return [].slice.call(arguments, 1).every(function (element) {\n    this._introduce(element);\n    return this.root(element) === root;\n  }.bind(this));\n};\n\n\n/**\n * Return the root element which represents the given element's subset.\n * The result does not depend on the choice of the element,\n *   but rather on the subset itself.\n * Complexity: O(A^-1) (inverse Ackermann function) amortized.\n *\n * @param {*} element\n * @return {*}\n */\nDisjointSetForest.prototype.root = function (element) {\n  this._introduce(element);\n  if (this._parents[element] !== element) {\n    this._parents[element] = this.root(this._parents[element]);\n  }\n  return this._parents[element];\n};\n\n\n/**\n * Return the size of the given element's subset.\n * Complexity: O(A^-1) (inverse Ackermann function) amortized.\n *\n * @param {*} element\n * @return {number}\n */\nDisjointSetForest.prototype.size = function (element) {\n  this._introduce(element);\n  return this._sizes[this.root(element)];\n};\n\n\n/**\n * Merge subsets containing two (or more) given elements into one.\n * Complexity: O(A^-1) (inverse Ackermann function) amortized.\n *\n * @param {*} element1\n * @param {*} element2\n * @param {...*}\n * @return {DisjointSetForest}\n */\nDisjointSetForest.prototype.merge = function merge(element1, element2) {\n  if (arguments.length > 2) {\n    merge.apply(this, [].slice.call(arguments, 1));\n  }\n\n  this._introduce(element1);\n  this._introduce(element2);\n  var root1 = this.root(element1);\n  var root2 = this.root(element2);\n\n  if (this._ranks[root1] < this._ranks[root2]) {\n    this._parents[root1] = root2;\n    this._sizes[root2] += this._sizes[root1];\n  }\n  else if (root1 !== root2) {\n    this._parents[root2] = root1;\n    this._sizes[root1] += this._sizes[root2];\n    if (this._ranks[root1] === this._ranks[root2]) {\n      this._ranks[root1] += 1;\n    }\n  }\n  return this;\n};\n\n\nmodule.exports = DisjointSetForest;\n"},"lineCount":109}},"error":null,"hash":"75389f40cda1ac706f876b62c72a389e","cacheData":{"env":{}}}