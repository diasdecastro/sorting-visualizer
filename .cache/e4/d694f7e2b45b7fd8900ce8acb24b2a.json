{"id":"node_modules/algorithms/algorithms/string/huffman.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n\nvar huffman = {};\n\n\n/**\n * Maximum block size used by functions \"compress\", \"decompress\".\n *\n * @const\n */\nvar MAX_BLOCK_SIZE = (-1 >>> 0).toString(2).length;\n\n\n/**\n * Compress 0-1 string to int32 array.\n *\n * @param {string} string\n * @return {number[]}\n */\nvar compress = function (string) {\n  var blocks = [];\n  var currentBlock = 0, currentBlockSize = 0;\n\n  string.split('').forEach(function (char) {\n    currentBlock = (currentBlock << 1) | char;\n    currentBlockSize += 1;\n\n    if (currentBlockSize === MAX_BLOCK_SIZE) {\n      blocks.push(currentBlock);\n      currentBlock = currentBlockSize = 0;\n    }\n  });\n\n  // Append last block size to the end.\n  if (currentBlockSize) {\n    blocks.push(currentBlock, currentBlockSize);\n  }\n  else {\n    blocks.push(MAX_BLOCK_SIZE);\n  }\n\n  return blocks;\n};\n\n\n/**\n * Decompress int32 array back to 0-1 string.\n *\n * @param {number[]} array\n * @return {string}\n */\nvar decompress = function (array) {\n  if (!array.length) {\n    return '';\n  }\n  else if (array.length === 1) {\n    throw new Error('Compressed array must be either empty ' +\n                    'or at least 2 blocks big.');\n  }\n\n  var padding = new Array(MAX_BLOCK_SIZE + 1).join(0);\n\n  var string = array.slice(0, -2).map(function (block) {\n    return (padding + (block >>> 0).toString(2)).slice(-padding.length);\n  }).join('');\n\n  // Append the last block.\n  var lastBlockSize = array.slice(-1)[0];\n  var lastBlock = array.slice(-2)[0];\n  string += (padding + (lastBlock >>> 0).toString(2)).slice(-lastBlockSize);\n\n  return string;\n};\n\n\n/**\n * Apply Huffman encoding to a string.\n *\n * @param {string} string\n * @param {boolean} [compressed=false] - Whether compress the string to bits.\n * @return {{encoding: Object.<string, string>, value: string|number[]}}\n */\nhuffman.encode = function (string, compressed) {\n  if (!string.length) {\n    return {\n      encoding: {},\n      value: (compressed ? [] : '')\n    };\n  }\n\n  var counter = {};\n  string.split('').forEach(function (char) {\n    counter[char] = (counter[char] || 0) + 1;\n  });\n\n  var letters = Object.keys(counter).map(function (char) {\n    return {\n      char: char,\n      count: counter[char]\n    };\n  });\n\n  var compare = function (a, b) {\n    return a.count - b.count;\n  };\n  var less = function (a, b) {\n    return a && (b && (a.count < b.count) || !b);\n  };\n\n  letters.sort(compare);\n\n  // Each time two least letters are merged into one, the result is pushing into\n  // this buffer. Since the letters are pushing in ascending order of frequency,\n  // no more sorting is ever required.\n  var buffer = [];\n  var lettersIndex = 0, bufferIndex = 0;\n\n  var extractMinimum = function () {\n    return less(letters[lettersIndex], buffer[bufferIndex]) ?\n      letters[lettersIndex++] : buffer[bufferIndex++];\n  };\n\n  for (var numLetters = letters.length; numLetters > 1; --numLetters) {\n    var a = extractMinimum(), b = extractMinimum();\n    a.code = '0';\n    b.code = '1';\n    var union = {\n      count: a.count + b.count,\n      parts: [a, b]\n    };\n    buffer.push(union);\n  }\n\n  // At this point there is a single letter left.\n  var root = extractMinimum();\n  root.code = (letters.length > 1) ? '' : '0';\n\n  // Unroll the code recursively in reverse.\n  (function unroll(parent) {\n    if (parent.parts) {\n      var a = parent.parts[0], b = parent.parts[1];\n      a.code += parent.code;\n      b.code += parent.code;\n      unroll(a);\n      unroll(b);\n    }\n  })(root);\n\n  var encoding = letters.reduce(function (acc, letter) {\n    acc[letter.char] = letter.code.split('').reverse().join('');\n    return acc;\n  }, {});\n\n  // Finally, apply the encoding to the given string.\n  var result = string.split('').map(function (char) {\n    return encoding[char];\n  }).join('');\n\n  return {\n    encoding: encoding,\n    value: (compressed ? compress(result) : result)\n  };\n};\n\n\n/**\n * Decode a Huffman-encoded string or compressed number sequence.\n *\n * @param {Object.<string, string>} encoding - Maps characters to 0-1 sequences.\n * @param {string|number[]} encodedString\n * @return {string} Decoded string.\n */\nhuffman.decode = function (encoding, encodedString) {\n  if (Array.isArray(encodedString)) {\n    encodedString = decompress(encodedString);\n  }\n\n  // We can make use of the fact that encoding mapping is always one-to-one\n  // and rely on the power of JS hashes instead of building hand-made FSMs.\n  var letterByCode = Object.keys(encoding).reduce(function (acc, letter) {\n    acc[encoding[letter]] = letter;\n    return acc;\n  }, {});\n\n  var decodedLetters = [];\n\n  var unresolved = encodedString.split('').reduce(function (code, char) {\n    code += char;\n    var letter = letterByCode[code];\n    if (letter) {\n      decodedLetters.push(letter);\n      code = '';\n    }\n    return code;\n  }, '');\n\n  if (unresolved) {\n    throw new Error('Invalid string to decode.');\n  }\n\n  return decodedLetters.join('');\n};\n\n\nmodule.exports = huffman;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/algorithms/algorithms/string/huffman.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}}],"sources":{"node_modules/algorithms/algorithms/string/huffman.js":"'use strict';\n\n\nvar huffman = {};\n\n\n/**\n * Maximum block size used by functions \"compress\", \"decompress\".\n *\n * @const\n */\nvar MAX_BLOCK_SIZE = (-1 >>> 0).toString(2).length;\n\n\n/**\n * Compress 0-1 string to int32 array.\n *\n * @param {string} string\n * @return {number[]}\n */\nvar compress = function (string) {\n  var blocks = [];\n  var currentBlock = 0, currentBlockSize = 0;\n\n  string.split('').forEach(function (char) {\n    currentBlock = (currentBlock << 1) | char;\n    currentBlockSize += 1;\n\n    if (currentBlockSize === MAX_BLOCK_SIZE) {\n      blocks.push(currentBlock);\n      currentBlock = currentBlockSize = 0;\n    }\n  });\n\n  // Append last block size to the end.\n  if (currentBlockSize) {\n    blocks.push(currentBlock, currentBlockSize);\n  }\n  else {\n    blocks.push(MAX_BLOCK_SIZE);\n  }\n\n  return blocks;\n};\n\n\n/**\n * Decompress int32 array back to 0-1 string.\n *\n * @param {number[]} array\n * @return {string}\n */\nvar decompress = function (array) {\n  if (!array.length) {\n    return '';\n  }\n  else if (array.length === 1) {\n    throw new Error('Compressed array must be either empty ' +\n                    'or at least 2 blocks big.');\n  }\n\n  var padding = new Array(MAX_BLOCK_SIZE + 1).join(0);\n\n  var string = array.slice(0, -2).map(function (block) {\n    return (padding + (block >>> 0).toString(2)).slice(-padding.length);\n  }).join('');\n\n  // Append the last block.\n  var lastBlockSize = array.slice(-1)[0];\n  var lastBlock = array.slice(-2)[0];\n  string += (padding + (lastBlock >>> 0).toString(2)).slice(-lastBlockSize);\n\n  return string;\n};\n\n\n/**\n * Apply Huffman encoding to a string.\n *\n * @param {string} string\n * @param {boolean} [compressed=false] - Whether compress the string to bits.\n * @return {{encoding: Object.<string, string>, value: string|number[]}}\n */\nhuffman.encode = function (string, compressed) {\n  if (!string.length) {\n    return {\n      encoding: {},\n      value: (compressed ? [] : '')\n    };\n  }\n\n  var counter = {};\n  string.split('').forEach(function (char) {\n    counter[char] = (counter[char] || 0) + 1;\n  });\n\n  var letters = Object.keys(counter).map(function (char) {\n    return {\n      char: char,\n      count: counter[char]\n    };\n  });\n\n  var compare = function (a, b) {\n    return a.count - b.count;\n  };\n  var less = function (a, b) {\n    return a && (b && (a.count < b.count) || !b);\n  };\n\n  letters.sort(compare);\n\n  // Each time two least letters are merged into one, the result is pushing into\n  // this buffer. Since the letters are pushing in ascending order of frequency,\n  // no more sorting is ever required.\n  var buffer = [];\n  var lettersIndex = 0, bufferIndex = 0;\n\n  var extractMinimum = function () {\n    return less(letters[lettersIndex], buffer[bufferIndex]) ?\n      letters[lettersIndex++] : buffer[bufferIndex++];\n  };\n\n  for (var numLetters = letters.length; numLetters > 1; --numLetters) {\n    var a = extractMinimum(), b = extractMinimum();\n    a.code = '0';\n    b.code = '1';\n    var union = {\n      count: a.count + b.count,\n      parts: [a, b]\n    };\n    buffer.push(union);\n  }\n\n  // At this point there is a single letter left.\n  var root = extractMinimum();\n  root.code = (letters.length > 1) ? '' : '0';\n\n  // Unroll the code recursively in reverse.\n  (function unroll(parent) {\n    if (parent.parts) {\n      var a = parent.parts[0], b = parent.parts[1];\n      a.code += parent.code;\n      b.code += parent.code;\n      unroll(a);\n      unroll(b);\n    }\n  })(root);\n\n  var encoding = letters.reduce(function (acc, letter) {\n    acc[letter.char] = letter.code.split('').reverse().join('');\n    return acc;\n  }, {});\n\n  // Finally, apply the encoding to the given string.\n  var result = string.split('').map(function (char) {\n    return encoding[char];\n  }).join('');\n\n  return {\n    encoding: encoding,\n    value: (compressed ? compress(result) : result)\n  };\n};\n\n\n/**\n * Decode a Huffman-encoded string or compressed number sequence.\n *\n * @param {Object.<string, string>} encoding - Maps characters to 0-1 sequences.\n * @param {string|number[]} encodedString\n * @return {string} Decoded string.\n */\nhuffman.decode = function (encoding, encodedString) {\n  if (Array.isArray(encodedString)) {\n    encodedString = decompress(encodedString);\n  }\n\n  // We can make use of the fact that encoding mapping is always one-to-one\n  // and rely on the power of JS hashes instead of building hand-made FSMs.\n  var letterByCode = Object.keys(encoding).reduce(function (acc, letter) {\n    acc[encoding[letter]] = letter;\n    return acc;\n  }, {});\n\n  var decodedLetters = [];\n\n  var unresolved = encodedString.split('').reduce(function (code, char) {\n    code += char;\n    var letter = letterByCode[code];\n    if (letter) {\n      decodedLetters.push(letter);\n      code = '';\n    }\n    return code;\n  }, '');\n\n  if (unresolved) {\n    throw new Error('Invalid string to decode.');\n  }\n\n  return decodedLetters.join('');\n};\n\n\nmodule.exports = huffman;\n"},"lineCount":207}},"error":null,"hash":"092cd9a295fa16bf2ec0e64a53e40594","cacheData":{"env":{}}}