{"id":"node_modules/algorithms/algorithms/graph/dijkstra.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../data_structures/priority_queue","loc":{"line":3,"column":28},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\dijkstra.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\priority_queue.js"}],"generated":{"js":"'use strict';\n\nvar PriorityQueue = require('../../data_structures/priority_queue');\n\n/**\n * Calculates the shortest paths in a graph to every node from the node s\n * with Dijkstra's algorithm\n *\n * @param {Object} graph An adjacency list representing the graph\n * @param {string} start the starting node\n *\n */\nfunction dijkstra(graph, s) {\n  var distance = {};\n  var previous = {};\n  var q = new PriorityQueue();\n  // Initialize\n  distance[s] = 0;\n  graph.vertices.forEach(function (v) {\n    if (v !== s) {\n      distance[v] = Infinity;\n    }\n    q.insert(v, distance[v]);\n  });\n\n  var currNode;\n  var relax = function (v) {\n    var newDistance = distance[currNode] + graph.edge(currNode, v);\n    if (newDistance < distance[v]) {\n      distance[v] = newDistance;\n      previous[v] = currNode;\n      q.changePriority(v, distance[v]);\n    }\n  };\n  while (!q.isEmpty()) {\n    currNode = q.extract();\n    graph.neighbors(currNode).forEach(relax);\n  }\n  return {\n    distance: distance,\n    previous: previous\n  };\n}\n\nmodule.exports = dijkstra;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/dijkstra.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}}],"sources":{"node_modules/algorithms/algorithms/graph/dijkstra.js":"'use strict';\n\nvar PriorityQueue = require('../../data_structures/priority_queue');\n\n/**\n * Calculates the shortest paths in a graph to every node from the node s\n * with Dijkstra's algorithm\n *\n * @param {Object} graph An adjacency list representing the graph\n * @param {string} start the starting node\n *\n */\nfunction dijkstra(graph, s) {\n  var distance = {};\n  var previous = {};\n  var q = new PriorityQueue();\n  // Initialize\n  distance[s] = 0;\n  graph.vertices.forEach(function (v) {\n    if (v !== s) {\n      distance[v] = Infinity;\n    }\n    q.insert(v, distance[v]);\n  });\n\n  var currNode;\n  var relax = function (v) {\n    var newDistance = distance[currNode] + graph.edge(currNode, v);\n    if (newDistance < distance[v]) {\n      distance[v] = newDistance;\n      previous[v] = currNode;\n      q.changePriority(v, distance[v]);\n    }\n  };\n  while (!q.isEmpty()) {\n    currNode = q.extract();\n    graph.neighbors(currNode).forEach(relax);\n  }\n  return {\n    distance: distance,\n    previous: previous\n  };\n}\n\nmodule.exports = dijkstra;\n"},"lineCount":46}},"error":null,"hash":"785b794c6fa2413ebb6057211f64f02a","cacheData":{"env":{}}}