{"id":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"./breadth_first_search","loc":{"line":3,"column":33},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\bfs_shortest_path.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\breadth_first_search.js"}],"generated":{"js":"'use strict';\n\nvar breadthFirstSearch = require('./breadth_first_search');\n\n\n/**\n * Shortest-path algorithm based on Breadth-First Search.\n * Works solely on graphs with equal edge weights (but works fast).\n * Complexity: O(V + E).\n *\n * @param {Graph} graph\n * @param {string} source\n * @return {{distance: Object.<string, number>,\n *           previous: Object.<string, string>}}\n */\nvar bfsShortestPath = function (graph, source) {\n  var distance = {}, previous = {};\n  distance[source] = 0;\n\n  breadthFirstSearch(graph, source, {\n    onTraversal: function (vertex, neighbor) {\n      distance[neighbor] = distance[vertex] + 1;\n      previous[neighbor] = vertex;\n    }\n  });\n\n  return {\n    distance: distance,\n    previous: previous\n  };\n};\n\n\nmodule.exports = bfsShortestPath;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}}],"sources":{"node_modules/algorithms/algorithms/graph/bfs_shortest_path.js":"'use strict';\n\nvar breadthFirstSearch = require('./breadth_first_search');\n\n\n/**\n * Shortest-path algorithm based on Breadth-First Search.\n * Works solely on graphs with equal edge weights (but works fast).\n * Complexity: O(V + E).\n *\n * @param {Graph} graph\n * @param {string} source\n * @return {{distance: Object.<string, number>,\n *           previous: Object.<string, string>}}\n */\nvar bfsShortestPath = function (graph, source) {\n  var distance = {}, previous = {};\n  distance[source] = 0;\n\n  breadthFirstSearch(graph, source, {\n    onTraversal: function (vertex, neighbor) {\n      distance[neighbor] = distance[vertex] + 1;\n      previous[neighbor] = vertex;\n    }\n  });\n\n  return {\n    distance: distance,\n    previous: previous\n  };\n};\n\n\nmodule.exports = bfsShortestPath;\n"},"lineCount":35}},"error":null,"hash":"044af637ecce8057a7d8669cfec3c085","cacheData":{"env":{}}}