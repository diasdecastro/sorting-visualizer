{"id":"node_modules/algorithms/algorithms/search/bfs.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../data_structures/queue.js","loc":{"line":2,"column":20},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\search\\bfs.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\queue.js"}],"generated":{"js":"'use strict';\nvar Queue = require('../../data_structures/queue.js');\n\n/**\n * Breadth-first search for binary trees\n */\nvar bfs = function (root, callback) {\n  var q = new Queue();\n  q.push(root);\n  var node;\n  while (!q.isEmpty()) {\n    node = q.pop();\n    callback(node.value);\n    if (node.left) q.push(node.left);\n    if (node.right) q.push(node.right);\n  }\n};\n\nmodule.exports = bfs;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/search/bfs.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}}],"sources":{"node_modules/algorithms/algorithms/search/bfs.js":"'use strict';\nvar Queue = require('../../data_structures/queue.js');\n\n/**\n * Breadth-first search for binary trees\n */\nvar bfs = function (root, callback) {\n  var q = new Queue();\n  q.push(root);\n  var node;\n  while (!q.isEmpty()) {\n    node = q.pop();\n    callback(node.value);\n    if (node.left) q.push(node.left);\n    if (node.right) q.push(node.right);\n  }\n};\n\nmodule.exports = bfs;\n"},"lineCount":20}},"error":null,"hash":"a2af5ff5bb7a271ee2e3a7670dad28b2","cacheData":{"env":{}}}