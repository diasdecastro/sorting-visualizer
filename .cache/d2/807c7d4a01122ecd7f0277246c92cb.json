{"id":"node_modules/algorithms/data_structures/hash_table.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"./linked_list","loc":{"line":3,"column":25},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\hash_table.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\linked_list.js"}],"generated":{"js":"'use strict';\n\nvar LinkedList = require('./linked_list');\n\nfunction HashTable(initialCapacity) {\n  this._table = new Array(initialCapacity || 64);\n  this._items = 0;\n\n  Object.defineProperty(this, 'capacity', {\n    get: function () {\n      return this._table.length;\n    }\n  });\n\n  Object.defineProperty(this, 'size', {\n    get: function () {\n      return this._items;\n    }\n  });\n}\n\n/**\n * (Same algorithm as Java's String.hashCode)\n * Returns a hash code for this string. The hash code for a String object is\n * computed as: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n * using int arithmetic, where s[i] is the ith character of the string,\n * n is the length of the string, and ^ indicates exponentiation.\n * (The hash value of the empty string is zero.)\n */\nHashTable.prototype.hash = function (s) {\n  if (typeof s !== 'string') s = JSON.stringify(s);\n  var hash = 0;\n  for (var i = 0; i < s.length; i++) {\n    hash = ((hash << 5) - hash) + s.charCodeAt(i);\n    hash &= hash; // Keep it a 32bit int\n  }\n  return hash;\n};\n\nHashTable.prototype.get = function (key) {\n  var i = this._position(key);\n  var node;\n  if ((node = this._findInList(this._table[i], key))) {\n    return node.value.v;\n  }\n};\n\nHashTable.prototype.put = function (key, value) {\n  var i = this._position(key);\n  if (!this._table[i]) {\n    // Hashing with chaining\n    this._table[i] = new LinkedList();\n  }\n  var item = {k: key, v: value};\n\n  var node = this._findInList(this._table[i], key);\n  if (node) {\n    // if the key already exists in the list, replace\n    // by the current item\n    node.value = item;\n  } else {\n    this._table[i].add(item);\n    this._items++;\n\n    if (this._items === this.capacity) this._increaseCapacity();\n  }\n};\n\nHashTable.prototype.del = function (key) {\n  var i = this._position(key);\n  var node;\n\n  if ((node = this._findInList(this._table[i], key))) {\n    this._table[i].delNode(node);\n    this._items--;\n  }\n};\n\nHashTable.prototype._position = function (key) {\n  return Math.abs(this.hash(key)) % this.capacity;\n};\n\nHashTable.prototype._findInList = function (list, key) {\n  var node = list && list.head;\n  while (node) {\n    if (node.value.k === key) return node;\n    node = node.next;\n  }\n};\n\nHashTable.prototype._increaseCapacity = function () {\n  var oldTable = this._table;\n  this._table = new Array(2 * this.capacity);\n  this._items = 0;\n\n  for (var i = 0; i < oldTable.length; i++) {\n    var node = oldTable[i] && oldTable[i].head;\n    while (node) {\n      this.put(node.value.k, node.value.v);\n      node = node.next;\n    }\n  }\n};\n\nHashTable.prototype.forEach = function (fn) {\n  var applyFunction = function (linkedList) {\n    linkedList.forEach(function (elem) {\n      fn(elem.k, elem.v);\n    });\n  };\n\n  for (var i = 0; i < this._table.length; i++) {\n    if (this._table[i]) {\n      applyFunction(this._table[i]);\n    }\n  }\n};\n\nmodule.exports = HashTable;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/algorithms/data_structures/hash_table.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}}],"sources":{"node_modules/algorithms/data_structures/hash_table.js":"'use strict';\n\nvar LinkedList = require('./linked_list');\n\nfunction HashTable(initialCapacity) {\n  this._table = new Array(initialCapacity || 64);\n  this._items = 0;\n\n  Object.defineProperty(this, 'capacity', {\n    get: function () {\n      return this._table.length;\n    }\n  });\n\n  Object.defineProperty(this, 'size', {\n    get: function () {\n      return this._items;\n    }\n  });\n}\n\n/**\n * (Same algorithm as Java's String.hashCode)\n * Returns a hash code for this string. The hash code for a String object is\n * computed as: s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]\n * using int arithmetic, where s[i] is the ith character of the string,\n * n is the length of the string, and ^ indicates exponentiation.\n * (The hash value of the empty string is zero.)\n */\nHashTable.prototype.hash = function (s) {\n  if (typeof s !== 'string') s = JSON.stringify(s);\n  var hash = 0;\n  for (var i = 0; i < s.length; i++) {\n    hash = ((hash << 5) - hash) + s.charCodeAt(i);\n    hash &= hash; // Keep it a 32bit int\n  }\n  return hash;\n};\n\nHashTable.prototype.get = function (key) {\n  var i = this._position(key);\n  var node;\n  if ((node = this._findInList(this._table[i], key))) {\n    return node.value.v;\n  }\n};\n\nHashTable.prototype.put = function (key, value) {\n  var i = this._position(key);\n  if (!this._table[i]) {\n    // Hashing with chaining\n    this._table[i] = new LinkedList();\n  }\n  var item = {k: key, v: value};\n\n  var node = this._findInList(this._table[i], key);\n  if (node) {\n    // if the key already exists in the list, replace\n    // by the current item\n    node.value = item;\n  } else {\n    this._table[i].add(item);\n    this._items++;\n\n    if (this._items === this.capacity) this._increaseCapacity();\n  }\n};\n\nHashTable.prototype.del = function (key) {\n  var i = this._position(key);\n  var node;\n\n  if ((node = this._findInList(this._table[i], key))) {\n    this._table[i].delNode(node);\n    this._items--;\n  }\n};\n\nHashTable.prototype._position = function (key) {\n  return Math.abs(this.hash(key)) % this.capacity;\n};\n\nHashTable.prototype._findInList = function (list, key) {\n  var node = list && list.head;\n  while (node) {\n    if (node.value.k === key) return node;\n    node = node.next;\n  }\n};\n\nHashTable.prototype._increaseCapacity = function () {\n  var oldTable = this._table;\n  this._table = new Array(2 * this.capacity);\n  this._items = 0;\n\n  for (var i = 0; i < oldTable.length; i++) {\n    var node = oldTable[i] && oldTable[i].head;\n    while (node) {\n      this.put(node.value.k, node.value.v);\n      node = node.next;\n    }\n  }\n};\n\nHashTable.prototype.forEach = function (fn) {\n  var applyFunction = function (linkedList) {\n    linkedList.forEach(function (elem) {\n      fn(elem.k, elem.v);\n    });\n  };\n\n  for (var i = 0; i < this._table.length; i++) {\n    if (this._table[i]) {\n      applyFunction(this._table[i]);\n    }\n  }\n};\n\nmodule.exports = HashTable;\n"},"lineCount":120}},"error":null,"hash":"5ce02a5febc3c83f0d451f45d930c339","cacheData":{"env":{}}}