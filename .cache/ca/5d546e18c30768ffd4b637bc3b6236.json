{"id":"node_modules/algorithms/data_structures/bst.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../util/comparator","loc":{"line":2,"column":25},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\bst.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\util\\comparator.js"}],"generated":{"js":"'use strict';\nvar Comparator = require('../util/comparator');\n\n/**\n * Binary Search Tree\n */\nfunction BST(compareFn) {\n  this.root = null;\n  this._size = 0;\n  /**\n   * @var Comparator\n   */\n  this._comparator = new Comparator(compareFn);\n\n  /**\n   * Read-only property for the size of the tree\n   */\n  Object.defineProperty(this, 'size', {\n    get: function () { return this._size; }.bind(this)\n  });\n}\n\n/**\n * Tree node\n */\nfunction Node(value, parent) {\n  this.value = value;\n  this.parent = parent;\n  this.left = null;\n  this.right = null;\n}\n\n/**\n * Insert elements to the tree respecting the BST restrictions\n */\nBST.prototype.insert = function (value, parent) {\n  // Set the root as the initial insertion point\n  // if it has not been passed\n  if (!parent) {\n    if (!this.root) {\n      this.root = new Node(value);\n      this._size++;\n      return;\n    }\n    parent = this.root;\n  }\n\n  var child = this._comparator.lessThan(value, parent.value) ? 'left' : 'right';\n  if (parent[child]) {\n    this.insert(value, parent[child]);\n  } else {\n    parent[child] = new Node(value, parent);\n    this._size++;\n  }\n};\n\n/**\n * Returns if a tree contains an element in O(lg n)\n */\nBST.prototype.contains = function (e) {\n  return !!this._find(e);\n};\n\nBST.prototype._find = function (e, root) {\n\n  if (!root) {\n    if (this.root) root = this.root;\n    else return false;\n  }\n\n  if (root.value === e)\n    return root;\n\n  if (this._comparator.lessThan(e, root.value))\n    return root.left && this._find(e, root.left);\n\n  if (this._comparator.greaterThan(e, root.value))\n    return root.right && this._find(e, root.right);\n};\n\n/**\n * Substitute two nodes\n */\nBST.prototype._replaceNodeInParent = function (currNode, newNode) {\n  var parent = currNode.parent;\n  if (parent) {\n    parent[currNode === parent.left ? 'left' : 'right'] = newNode;\n    if (newNode)\n      newNode.parent = parent;\n  } else {\n    this.root = newNode;\n  }\n};\n\n/**\n * Find the minimum value in a tree\n */\nBST.prototype._findMin = function (root) {\n  var minNode = root;\n  while (minNode.left) {\n    minNode = minNode.left;\n  }\n  return minNode;\n};\n\n/**\n * Remove an element from the BST\n */\nBST.prototype.remove = function (e) {\n  var node = this._find(e);\n  if (!node) {\n    throw new Error('Item not found in the tree');\n  }\n\n  if (node.left && node.right) {\n    /**\n     * If the node to be removed has both left and right children,\n     * replace the node's value by the minimum value of the right\n     * sub-tree, and remove the leave containing the value\n     */\n    var successor = this._findMin(node.right);\n    this.remove(successor.value);\n    node.value = successor.value;\n  } else {\n    /**\n     * If the node is a leaf, just make the parent point to null,\n     * and if it has one child, make the parent point to this child\n     * instead\n     */\n    this._replaceNodeInParent(node, node.left || node.right);\n    this._size--;\n  }\n};\n\nmodule.exports = BST;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/algorithms/data_structures/bst.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}}],"sources":{"node_modules/algorithms/data_structures/bst.js":"'use strict';\nvar Comparator = require('../util/comparator');\n\n/**\n * Binary Search Tree\n */\nfunction BST(compareFn) {\n  this.root = null;\n  this._size = 0;\n  /**\n   * @var Comparator\n   */\n  this._comparator = new Comparator(compareFn);\n\n  /**\n   * Read-only property for the size of the tree\n   */\n  Object.defineProperty(this, 'size', {\n    get: function () { return this._size; }.bind(this)\n  });\n}\n\n/**\n * Tree node\n */\nfunction Node(value, parent) {\n  this.value = value;\n  this.parent = parent;\n  this.left = null;\n  this.right = null;\n}\n\n/**\n * Insert elements to the tree respecting the BST restrictions\n */\nBST.prototype.insert = function (value, parent) {\n  // Set the root as the initial insertion point\n  // if it has not been passed\n  if (!parent) {\n    if (!this.root) {\n      this.root = new Node(value);\n      this._size++;\n      return;\n    }\n    parent = this.root;\n  }\n\n  var child = this._comparator.lessThan(value, parent.value) ? 'left' : 'right';\n  if (parent[child]) {\n    this.insert(value, parent[child]);\n  } else {\n    parent[child] = new Node(value, parent);\n    this._size++;\n  }\n};\n\n/**\n * Returns if a tree contains an element in O(lg n)\n */\nBST.prototype.contains = function (e) {\n  return !!this._find(e);\n};\n\nBST.prototype._find = function (e, root) {\n\n  if (!root) {\n    if (this.root) root = this.root;\n    else return false;\n  }\n\n  if (root.value === e)\n    return root;\n\n  if (this._comparator.lessThan(e, root.value))\n    return root.left && this._find(e, root.left);\n\n  if (this._comparator.greaterThan(e, root.value))\n    return root.right && this._find(e, root.right);\n};\n\n/**\n * Substitute two nodes\n */\nBST.prototype._replaceNodeInParent = function (currNode, newNode) {\n  var parent = currNode.parent;\n  if (parent) {\n    parent[currNode === parent.left ? 'left' : 'right'] = newNode;\n    if (newNode)\n      newNode.parent = parent;\n  } else {\n    this.root = newNode;\n  }\n};\n\n/**\n * Find the minimum value in a tree\n */\nBST.prototype._findMin = function (root) {\n  var minNode = root;\n  while (minNode.left) {\n    minNode = minNode.left;\n  }\n  return minNode;\n};\n\n/**\n * Remove an element from the BST\n */\nBST.prototype.remove = function (e) {\n  var node = this._find(e);\n  if (!node) {\n    throw new Error('Item not found in the tree');\n  }\n\n  if (node.left && node.right) {\n    /**\n     * If the node to be removed has both left and right children,\n     * replace the node's value by the minimum value of the right\n     * sub-tree, and remove the leave containing the value\n     */\n    var successor = this._findMin(node.right);\n    this.remove(successor.value);\n    node.value = successor.value;\n  } else {\n    /**\n     * If the node is a leaf, just make the parent point to null,\n     * and if it has one child, make the parent point to this child\n     * instead\n     */\n    this._replaceNodeInParent(node, node.left || node.right);\n    this._size--;\n  }\n};\n\nmodule.exports = BST;\n"},"lineCount":136}},"error":null,"hash":"40e4e17605a1789359413e675f6dadce","cacheData":{"env":{}}}