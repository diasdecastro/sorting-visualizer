{"id":"node_modules/algorithms/algorithms/string/rabin_karp.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n/**\n * A prime number used to create\n * the hash representation of a word\n *\n * Bigger the prime number,\n * bigger the hash value\n */\nvar base = 997;\n\n/**\n * Calculates String Matching between two Strings\n * Returns true if String 'b' is contained in String 'a'\n *\n * Average and Best Case Complexity: O(a.length + b.length)\n * Worst Case Complexity: O(a.length * b.length)\n *\n * @param String\n * @param String\n * @return Integer\n */\nvar rabinKarp = function (s, pattern) {\n  if (pattern.length === 0) return 0;\n\n  var hashPattern = hash(pattern);\n  var currentSubstring = s.substring(0, pattern.length);\n  var hashCurrentSubstring;\n\n  for (var i = pattern.length; i <= s.length; i++) {\n    if (hashCurrentSubstring === undefined) {\n      hashCurrentSubstring = hash(currentSubstring);\n    } else {\n      /*\n       * Re-hash\n       * Recalculates the hash representation of a word so that it isn't\n       * necessary to traverse the whole word again\n       */\n      hashCurrentSubstring -= currentSubstring.charCodeAt(0) *\n        Math.pow(base, pattern.length - 1);\n      hashCurrentSubstring *= base;\n      hashCurrentSubstring += s.charCodeAt(i);\n\n      currentSubstring = currentSubstring.substring(1) + s[i];\n    }\n\n    if (hashPattern === hashCurrentSubstring &&\n        pattern === currentSubstring) {\n      // Hack for the off-by-one when matching in the beginning of the string\n      return i === pattern.length ? 0 : i - pattern.length + 1;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Creates the hash representation of 'word'\n *\n * @param String\n * @return Number\n */\nvar hash = function (word) {\n  var h = 0;\n\n  for (var i = 0; i < word.length; i++) {\n    h += word.charCodeAt(i) * Math.pow(base, word.length - i - 1);\n  }\n\n  return h;\n};\n\nmodule.exports = rabinKarp;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/algorithms/string/rabin_karp.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}}],"sources":{"node_modules/algorithms/algorithms/string/rabin_karp.js":"'use strict';\n\n/**\n * A prime number used to create\n * the hash representation of a word\n *\n * Bigger the prime number,\n * bigger the hash value\n */\nvar base = 997;\n\n/**\n * Calculates String Matching between two Strings\n * Returns true if String 'b' is contained in String 'a'\n *\n * Average and Best Case Complexity: O(a.length + b.length)\n * Worst Case Complexity: O(a.length * b.length)\n *\n * @param String\n * @param String\n * @return Integer\n */\nvar rabinKarp = function (s, pattern) {\n  if (pattern.length === 0) return 0;\n\n  var hashPattern = hash(pattern);\n  var currentSubstring = s.substring(0, pattern.length);\n  var hashCurrentSubstring;\n\n  for (var i = pattern.length; i <= s.length; i++) {\n    if (hashCurrentSubstring === undefined) {\n      hashCurrentSubstring = hash(currentSubstring);\n    } else {\n      /*\n       * Re-hash\n       * Recalculates the hash representation of a word so that it isn't\n       * necessary to traverse the whole word again\n       */\n      hashCurrentSubstring -= currentSubstring.charCodeAt(0) *\n        Math.pow(base, pattern.length - 1);\n      hashCurrentSubstring *= base;\n      hashCurrentSubstring += s.charCodeAt(i);\n\n      currentSubstring = currentSubstring.substring(1) + s[i];\n    }\n\n    if (hashPattern === hashCurrentSubstring &&\n        pattern === currentSubstring) {\n      // Hack for the off-by-one when matching in the beginning of the string\n      return i === pattern.length ? 0 : i - pattern.length + 1;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Creates the hash representation of 'word'\n *\n * @param String\n * @return Number\n */\nvar hash = function (word) {\n  var h = 0;\n\n  for (var i = 0; i < word.length; i++) {\n    h += word.charCodeAt(i) * Math.pow(base, word.length - i - 1);\n  }\n\n  return h;\n};\n\nmodule.exports = rabinKarp;\n"},"lineCount":74}},"error":null,"hash":"c4c5f3ed418252929f3ce08af35c3680","cacheData":{"env":{}}}