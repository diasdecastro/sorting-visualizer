{"id":"node_modules/algorithms/algorithms/graph/topological_sort.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../data_structures/stack","loc":{"line":3,"column":20},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\topological_sort.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\stack.js"},{"name":"../../algorithms/graph/depth_first_search","loc":{"line":4,"column":31},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\topological_sort.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\depth_first_search.js"}],"generated":{"js":"'use strict';\n\nvar Stack = require('../../data_structures/stack'),\n    depthFirstSearch = require('../../algorithms/graph/depth_first_search');\n\n/**\n * Sorts the edges of the DAG topologically\n *\n *  (node1) -> (node2) -> (node4)\n *     \\-> (node3)^\n *\n * Meaning that:\n * - \"node2\" and \"node3\" depend on \"node1\"\n * - \"node4\" depend on node2\n * - \"node2\" depend on \"node3\"\n *\n * @param {Graph}\n * @return Stack\n */\nvar topologicalSort = function (graph) {\n  var stack = new Stack();\n  var firstHit = {};\n  var time = 0;\n\n  graph.vertices.forEach(function (node) {\n    if (!firstHit[node]) {\n      depthFirstSearch(graph, node, {\n        allowTraversal: function (node, neighbor) {\n          return !firstHit[neighbor];\n        },\n        enterVertex: function (node) {\n          firstHit[node] = ++time;\n        },\n        leaveVertex: function (node) {\n          stack.push(node);\n        }\n      });\n    }\n  });\n\n  return stack;\n};\n\nmodule.exports = topologicalSort;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/topological_sort.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}}],"sources":{"node_modules/algorithms/algorithms/graph/topological_sort.js":"'use strict';\n\nvar Stack = require('../../data_structures/stack'),\n    depthFirstSearch = require('../../algorithms/graph/depth_first_search');\n\n/**\n * Sorts the edges of the DAG topologically\n *\n *  (node1) -> (node2) -> (node4)\n *     \\-> (node3)^\n *\n * Meaning that:\n * - \"node2\" and \"node3\" depend on \"node1\"\n * - \"node4\" depend on node2\n * - \"node2\" depend on \"node3\"\n *\n * @param {Graph}\n * @return Stack\n */\nvar topologicalSort = function (graph) {\n  var stack = new Stack();\n  var firstHit = {};\n  var time = 0;\n\n  graph.vertices.forEach(function (node) {\n    if (!firstHit[node]) {\n      depthFirstSearch(graph, node, {\n        allowTraversal: function (node, neighbor) {\n          return !firstHit[neighbor];\n        },\n        enterVertex: function (node) {\n          firstHit[node] = ++time;\n        },\n        leaveVertex: function (node) {\n          stack.push(node);\n        }\n      });\n    }\n  });\n\n  return stack;\n};\n\nmodule.exports = topologicalSort;\n"},"lineCount":45}},"error":null,"hash":"65a97b5687aba050f06d748abce95d6e","cacheData":{"env":{}}}