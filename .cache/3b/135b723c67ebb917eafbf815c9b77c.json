{"id":"node_modules/algorithms/algorithms/string/levenshtein.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n/**\n * Calculates the edit distance between two strings\n * considering the same cost of 1 to every operation\n * (addition, deletion, substitution)\n *\n * It uses dynamic programing and creates a matrix\n * where every cell [i,j] represents the distance between\n * the substrings a[0..i] and b[0..j]\n *\n * O(a.length * b.length)\n *\n * @param String\n * @param String\n * @return Number\n */\nvar levenshtein = function (a, b) {\n  var editDistance = [];\n  var i, j;\n\n  // Initialize the edit distance matrix. The first collumn contains\n  // the values comparing the string a to an empty string b\n  for (i = 0; i <= a.length; i++) {\n    editDistance[i] = [];\n    editDistance[i][0] = i;\n  }\n\n  // And the first line the values comparint the string b to an empty string a\n  for (j = 0; j <= b.length; j++) {\n    editDistance[0][j] = j;\n  }\n  for (i = 1; i <= a.length; i++) {\n    for (j = 1; j <= b.length; j++) {\n      // Finds the minimum cost for keeping the two strings equal\n      editDistance[i][j] =\n        Math.min(\n          editDistance[i - 1][j - 1], // if we replace a[i] by b[j]\n          editDistance[i - 1][j], // if we delete the char from a\n          editDistance[i][j - 1] // if we add the char from b\n        ) +\n        (a[i - 1] !== b[j - 1] ? 1 : 0);\n    }\n  }\n\n  return editDistance[a.length][b.length];\n};\n\nmodule.exports = levenshtein;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/string/levenshtein.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}}],"sources":{"node_modules/algorithms/algorithms/string/levenshtein.js":"'use strict';\n\n/**\n * Calculates the edit distance between two strings\n * considering the same cost of 1 to every operation\n * (addition, deletion, substitution)\n *\n * It uses dynamic programing and creates a matrix\n * where every cell [i,j] represents the distance between\n * the substrings a[0..i] and b[0..j]\n *\n * O(a.length * b.length)\n *\n * @param String\n * @param String\n * @return Number\n */\nvar levenshtein = function (a, b) {\n  var editDistance = [];\n  var i, j;\n\n  // Initialize the edit distance matrix. The first collumn contains\n  // the values comparing the string a to an empty string b\n  for (i = 0; i <= a.length; i++) {\n    editDistance[i] = [];\n    editDistance[i][0] = i;\n  }\n\n  // And the first line the values comparint the string b to an empty string a\n  for (j = 0; j <= b.length; j++) {\n    editDistance[0][j] = j;\n  }\n  for (i = 1; i <= a.length; i++) {\n    for (j = 1; j <= b.length; j++) {\n      // Finds the minimum cost for keeping the two strings equal\n      editDistance[i][j] =\n        Math.min(\n          editDistance[i - 1][j - 1], // if we replace a[i] by b[j]\n          editDistance[i - 1][j], // if we delete the char from a\n          editDistance[i][j - 1] // if we add the char from b\n        ) +\n        (a[i - 1] !== b[j - 1] ? 1 : 0);\n    }\n  }\n\n  return editDistance[a.length][b.length];\n};\n\nmodule.exports = levenshtein;\n"},"lineCount":50}},"error":null,"hash":"5576c14accb80106cc10caf87d507648","cacheData":{"env":{}}}