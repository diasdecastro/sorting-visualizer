{"id":"node_modules/algorithms/algorithms/math/fast_power.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n\nvar multiplicationOperator = function (a, b) {\n  return a * b;\n};\n\n\n/**\n * Raise value to a positive integer power by repeated squaring.\n *\n * @param {*} base\n * @param {number} power\n * @param {function} [mul] - Multiplication function,\n *   standard multiplication operator by default.\n * @param {*} identity - Identity value, used when power == 0.\n *   If mul is not set, defaults to 1.\n * @return {*}\n */\nvar fastPower = function (base, power, mul, identity) {\n  if (mul === undefined) {\n    mul = multiplicationOperator;\n    identity = 1;\n  }\n  if (power < 0 || Math.floor(power) !== power) {\n    throw new Error('Power must be a positive integer or zero.');\n  }\n\n  // If the power is zero, identity value must be given (or set by default).\n  if (!power) {\n    if (identity === undefined) {\n      throw new Error('The power is zero, but identity value not set.');\n    }\n    else {\n      return identity;\n    }\n  }\n\n  // Iterative form of the algorithm avoids checking the same thing twice.\n  var result;\n  var multiplyBy = function (value) {\n    result = (result === undefined) ? value : mul(result, value);\n  };\n  for (var factor = base; power; power >>>= 1, factor = mul(factor, factor)) {\n    if (power & 1) {\n      multiplyBy(factor);\n    }\n  }\n  return result;\n};\n\n\nmodule.exports = fastPower;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/math/fast_power.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"node_modules/algorithms/algorithms/math/fast_power.js":"'use strict';\n\n\nvar multiplicationOperator = function (a, b) {\n  return a * b;\n};\n\n\n/**\n * Raise value to a positive integer power by repeated squaring.\n *\n * @param {*} base\n * @param {number} power\n * @param {function} [mul] - Multiplication function,\n *   standard multiplication operator by default.\n * @param {*} identity - Identity value, used when power == 0.\n *   If mul is not set, defaults to 1.\n * @return {*}\n */\nvar fastPower = function (base, power, mul, identity) {\n  if (mul === undefined) {\n    mul = multiplicationOperator;\n    identity = 1;\n  }\n  if (power < 0 || Math.floor(power) !== power) {\n    throw new Error('Power must be a positive integer or zero.');\n  }\n\n  // If the power is zero, identity value must be given (or set by default).\n  if (!power) {\n    if (identity === undefined) {\n      throw new Error('The power is zero, but identity value not set.');\n    }\n    else {\n      return identity;\n    }\n  }\n\n  // Iterative form of the algorithm avoids checking the same thing twice.\n  var result;\n  var multiplyBy = function (value) {\n    result = (result === undefined) ? value : mul(result, value);\n  };\n  for (var factor = base; power; power >>>= 1, factor = mul(factor, factor)) {\n    if (power & 1) {\n      multiplyBy(factor);\n    }\n  }\n  return result;\n};\n\n\nmodule.exports = fastPower;\n"},"lineCount":54}},"error":null,"hash":"e1c7575f9d5d0e317d1ebf3021612ad5","cacheData":{"env":{}}}