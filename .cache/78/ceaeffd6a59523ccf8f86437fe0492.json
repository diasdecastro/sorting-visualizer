{"id":"node_modules/algorithms/algorithms/graph/euler_path.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519},{"name":"../../data_structures/graph","loc":{"line":4,"column":20},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\euler_path.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\data_structures\\graph.js"},{"name":"../../algorithms/graph/depth_first_search","loc":{"line":5,"column":31},"parent":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\euler_path.js","resolved":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\algorithms\\graph\\depth_first_search.js"}],"generated":{"js":"'use strict';\n\n\nvar Graph = require('../../data_structures/graph'),\n    depthFirstSearch = require('../../algorithms/graph/depth_first_search');\n\n\n/** Examine a graph and compute pair of end vertices of the existing Euler path.\n * Return pair of undefined values if there is no specific choice of end points.\n * Return value format: {start: START, finish: FINISH}.\n *\n * @param {Graph} Graph, must be connected and contain at least one vertex.\n * @return Object\n */\nvar eulerEndpoints = function (graph) {\n  var rank = {};\n  //     start     ->  rank = +1\n  // middle points ->  rank =  0\n  //    finish     ->  rank = -1\n\n  // Initialize ranks to be outdegrees of vertices.\n  graph.vertices.forEach(function (vertex) {\n    rank[vertex] = graph.neighbors(vertex).length;\n  });\n\n  if (graph.directed) {\n    // rank = outdegree - indegree\n    graph.vertices.forEach(function (vertex) {\n      graph.neighbors(vertex).forEach(function (neighbor) {\n        rank[neighbor] -= 1;\n      });\n    });\n  }\n  else {\n    // Compute ranks from vertex degree parity values.\n    var startChosen = false;\n    graph.vertices.forEach(function (vertex) {\n      rank[vertex] %= 2;\n      if (rank[vertex]) {\n        if (startChosen) {\n          rank[vertex] = -1;\n        }\n        startChosen = true;\n      }\n    });\n  }\n\n  var start, finish, v;\n\n  graph.vertices.forEach(function (vertex) {\n    if (rank[vertex] === 1) {\n      if (start) {\n        throw new Error('Duplicate start vertex.');\n      }\n      start = vertex;\n    } else if (rank[vertex] === -1) {\n      if (finish) {\n        throw new Error('Duplicate finish vertex.');\n      }\n      finish = vertex;\n    } else if (rank[vertex]) {\n      throw new Error('Unexpected vertex degree for ' + vertex);\n    } else if (!v) {\n      v = vertex;\n    }\n  });\n\n  if (!start && !finish) {\n    start = finish = v;\n  }\n\n  return {start: start,\n          finish: finish};\n};\n\n\n/**\n * Compute Euler path (either walk or tour, depending on the graph).\n * Euler path is a trail in a graph which visits every edge exactly once.\n * The procedure works both for directed and undirected graphs,\n *   although the details differ a bit.\n * The resulting array consists of exactly |E|+1 vertices.\n *\n * @param {Graph}\n * @return Array\n */\nvar eulerPath = function (graph) {\n  if (!graph.vertices.size) {\n    return [];\n  }\n\n  var endpoints = eulerEndpoints(graph);\n  var route = [endpoints.finish];\n\n  var seen = new Graph(graph.directed);\n  graph.vertices.forEach(seen.addVertex.bind(seen));\n\n  depthFirstSearch(graph, endpoints.start, {\n    allowTraversal: function (vertex, neighbor) {\n      return !seen.edge(vertex, neighbor);\n    },\n    beforeTraversal: function (vertex, neighbor) {\n      seen.addEdge(vertex, neighbor);\n    },\n    afterTraversal: function (vertex) {\n      route.push(vertex);\n    }\n  });\n\n  graph.vertices.forEach(function (vertex) {\n    if (seen.neighbors(vertex).length < graph.neighbors(vertex).length) {\n      throw new Error('There is no euler path for a disconnected graph.');\n    }\n  });\n  return route.reverse();\n};\n\n\nmodule.exports = eulerPath;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/euler_path.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}}],"sources":{"node_modules/algorithms/algorithms/graph/euler_path.js":"'use strict';\n\n\nvar Graph = require('../../data_structures/graph'),\n    depthFirstSearch = require('../../algorithms/graph/depth_first_search');\n\n\n/** Examine a graph and compute pair of end vertices of the existing Euler path.\n * Return pair of undefined values if there is no specific choice of end points.\n * Return value format: {start: START, finish: FINISH}.\n *\n * @param {Graph} Graph, must be connected and contain at least one vertex.\n * @return Object\n */\nvar eulerEndpoints = function (graph) {\n  var rank = {};\n  //     start     ->  rank = +1\n  // middle points ->  rank =  0\n  //    finish     ->  rank = -1\n\n  // Initialize ranks to be outdegrees of vertices.\n  graph.vertices.forEach(function (vertex) {\n    rank[vertex] = graph.neighbors(vertex).length;\n  });\n\n  if (graph.directed) {\n    // rank = outdegree - indegree\n    graph.vertices.forEach(function (vertex) {\n      graph.neighbors(vertex).forEach(function (neighbor) {\n        rank[neighbor] -= 1;\n      });\n    });\n  }\n  else {\n    // Compute ranks from vertex degree parity values.\n    var startChosen = false;\n    graph.vertices.forEach(function (vertex) {\n      rank[vertex] %= 2;\n      if (rank[vertex]) {\n        if (startChosen) {\n          rank[vertex] = -1;\n        }\n        startChosen = true;\n      }\n    });\n  }\n\n  var start, finish, v;\n\n  graph.vertices.forEach(function (vertex) {\n    if (rank[vertex] === 1) {\n      if (start) {\n        throw new Error('Duplicate start vertex.');\n      }\n      start = vertex;\n    } else if (rank[vertex] === -1) {\n      if (finish) {\n        throw new Error('Duplicate finish vertex.');\n      }\n      finish = vertex;\n    } else if (rank[vertex]) {\n      throw new Error('Unexpected vertex degree for ' + vertex);\n    } else if (!v) {\n      v = vertex;\n    }\n  });\n\n  if (!start && !finish) {\n    start = finish = v;\n  }\n\n  return {start: start,\n          finish: finish};\n};\n\n\n/**\n * Compute Euler path (either walk or tour, depending on the graph).\n * Euler path is a trail in a graph which visits every edge exactly once.\n * The procedure works both for directed and undirected graphs,\n *   although the details differ a bit.\n * The resulting array consists of exactly |E|+1 vertices.\n *\n * @param {Graph}\n * @return Array\n */\nvar eulerPath = function (graph) {\n  if (!graph.vertices.size) {\n    return [];\n  }\n\n  var endpoints = eulerEndpoints(graph);\n  var route = [endpoints.finish];\n\n  var seen = new Graph(graph.directed);\n  graph.vertices.forEach(seen.addVertex.bind(seen));\n\n  depthFirstSearch(graph, endpoints.start, {\n    allowTraversal: function (vertex, neighbor) {\n      return !seen.edge(vertex, neighbor);\n    },\n    beforeTraversal: function (vertex, neighbor) {\n      seen.addEdge(vertex, neighbor);\n    },\n    afterTraversal: function (vertex) {\n      route.push(vertex);\n    }\n  });\n\n  graph.vertices.forEach(function (vertex) {\n    if (seen.neighbors(vertex).length < graph.neighbors(vertex).length) {\n      throw new Error('There is no euler path for a disconnected graph.');\n    }\n  });\n  return route.reverse();\n};\n\n\nmodule.exports = eulerPath;\n"},"lineCount":120}},"error":null,"hash":"48447e5e2afac069537befe59201c233","cacheData":{"env":{}}}