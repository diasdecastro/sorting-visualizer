{"id":"node_modules/algorithms/algorithms/graph/SPFA.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n/**\n * Calculates the shortest paths in a graph to every node from the node s\n * with SPFA(Shortest Path Faster Algorithm) algorithm\n *\n * @param {Object} graph An adjacency list representing the graph\n * @param {string} start the starting node\n *\n */\nfunction spfa(graph, s) {\n  var distance = {};\n  var previous = {};\n  var queue = {};\n  var isInQue = {};\n  var cnt = {};\n  var head = 0;\n  var tail = 1;\n  // initialize\n  distance[s] = 0;\n  queue[0] = s;\n  isInQue[s] = true;\n  cnt[s] = 1;\n  graph.vertices.forEach(function (v) {\n    if (v !== s) {\n      distance[v] = Infinity;\n      isInQue[v] = false;\n      cnt[v] = 0;\n    }\n  });\n\n  var currNode;\n  while (head !== tail) {\n    currNode = queue[head++];\n    isInQue[currNode] = false;\n    var neighbors = graph.neighbors(currNode);\n    for (var i = 0; i < neighbors.length; i++) {\n      var v = neighbors[i];\n      // relaxation\n      var newDistance = distance[currNode] + graph.edge(currNode, v);\n      if (newDistance < distance[v]) {\n        distance[v] = newDistance;\n        previous[v] = currNode;\n        if (!isInQue[v]) {\n          queue[tail++] = v;\n          isInQue[v] = true;\n          cnt[v]++;\n          if (cnt[v] > graph.vertices.size)\n            // indicates negative-weighted cycle\n            return {\n              distance: {}\n            };\n        }\n      }\n    }\n  }\n\n  return {\n    distance: distance,\n    previous: previous\n  };\n}\n\nmodule.exports = spfa;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/algorithms/graph/SPFA.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}}],"sources":{"node_modules/algorithms/algorithms/graph/SPFA.js":"'use strict';\n\n/**\n * Calculates the shortest paths in a graph to every node from the node s\n * with SPFA(Shortest Path Faster Algorithm) algorithm\n *\n * @param {Object} graph An adjacency list representing the graph\n * @param {string} start the starting node\n *\n */\nfunction spfa(graph, s) {\n  var distance = {};\n  var previous = {};\n  var queue = {};\n  var isInQue = {};\n  var cnt = {};\n  var head = 0;\n  var tail = 1;\n  // initialize\n  distance[s] = 0;\n  queue[0] = s;\n  isInQue[s] = true;\n  cnt[s] = 1;\n  graph.vertices.forEach(function (v) {\n    if (v !== s) {\n      distance[v] = Infinity;\n      isInQue[v] = false;\n      cnt[v] = 0;\n    }\n  });\n\n  var currNode;\n  while (head !== tail) {\n    currNode = queue[head++];\n    isInQue[currNode] = false;\n    var neighbors = graph.neighbors(currNode);\n    for (var i = 0; i < neighbors.length; i++) {\n      var v = neighbors[i];\n      // relaxation\n      var newDistance = distance[currNode] + graph.edge(currNode, v);\n      if (newDistance < distance[v]) {\n        distance[v] = newDistance;\n        previous[v] = currNode;\n        if (!isInQue[v]) {\n          queue[tail++] = v;\n          isInQue[v] = true;\n          cnt[v]++;\n          if (cnt[v] > graph.vertices.size)\n            // indicates negative-weighted cycle\n            return {\n              distance: {}\n            };\n        }\n      }\n    }\n  }\n\n  return {\n    distance: distance,\n    previous: previous\n  };\n}\n\nmodule.exports = spfa;\n"},"lineCount":65}},"error":null,"hash":"34b90428fddacd93d266a9b759ba2098","cacheData":{"env":{}}}