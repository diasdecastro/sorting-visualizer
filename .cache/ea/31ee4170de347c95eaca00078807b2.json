{"id":"node_modules/algorithms/data_structures/avl_tree.js","dependencies":[{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\package.json","includedInParent":true,"mtime":1588264908566},{"name":"C:\\Users\\crist\\MyGitProjects\\MyWebProjects\\myWebApp\\node_modules\\algorithms\\package.json","includedInParent":true,"mtime":1588264908519}],"generated":{"js":"'use strict';\n\n/**\n * AVL Tree\n */\nfunction AVLTree() {\n  this.root = null;\n}\n\n/**\n * Tree node\n */\nfunction Node(value, left, right, parent, height) {\n  this.value = value;\n  this.left = left;\n  this.right = right;\n  this.parent = parent;\n  this.height = height;\n}\n\n/**\n * Calculates the height of a node based on height\n * property of all his children.\n */\nAVLTree.prototype.getNodeHeight = function (node) {\n  var height = 1;\n  if (node.left !== null && node.right !== null) {\n    height = Math.max(node.left.height, node.right.height) + 1;\n  } else if (node.left !== null) {\n    height = node.left.height + 1;\n  } else if (node.right !== null) {\n    height = node.right.height + 1;\n  }\n  return height;\n};\n\n/**\n * Verifies if the given node is balanced.\n */\nAVLTree.prototype.isNodeBalanced = function (node) {\n  var isBalanced = true;\n\n  if (node.left !== null && node.right !== null) {\n    isBalanced = (Math.abs(node.left.height - node.right.height) <= 1);\n  } else if (node.right !== null && node.left === null) {\n    isBalanced = node.right.height < 2;\n  } else if (node.left !== null && node.right === null) {\n    isBalanced = node.left.height < 2;\n  }\n  return isBalanced;\n};\n\n/**\n * When a removal happens, some nodes need to be\n * restructured. Gets and return these nodes.\n */\nAVLTree.prototype.getNodesToRestructureAfterRemove = function (traveledNodes) {\n  // z is last traveled node - imbalance found at z\n  var zIndex = traveledNodes.length - 1;\n  var z = traveledNodes[zIndex];\n\n  // y should be child of z with larger height\n  // (cannot be ancestor of removed node)\n  var y;\n  if (z.left !== null && z.right !== null) {\n    y = (z.left === y) ? z.right : z.left;\n  } else if (z.left !== null && z.right === null) {\n    y = z.left;\n  } else if (z.right !== null && z.left === null) {\n    y = z.right;\n  }\n\n  // x should be tallest child of y\n  // If children same height, x should be child of y\n  // that has same orientation as z to y\n  var x;\n  if (y.left !== null && y.right !== null) {\n    if (y.left.height > y.right.height) {\n      x = y.left;\n    } else if (y.left.height < y.right.height) {\n      x = y.right;\n    } else if (y.left.height === y.right.height) {\n      x = (z.left === y) ? y.left : y.right;\n    }\n  } else if (y.left !== null && y.right === null) {\n    x = y.left;\n  } else if (y.right !== null && y.left === null) {\n    x = y.right;\n  }\n  return [x, y, z];\n};\n\n/**\n * When a insertion happens, some nodes need to be\n * restructured. Gets and return these nodes.\n */\nAVLTree.prototype.getNodesToRestructureAfterInsert = function (traveledNodes) {\n  // z is last traveled node - imbalance found at z\n  var zIndex = traveledNodes.length - 1;\n  var z = traveledNodes[zIndex];\n\n  // y should be child of z with larger height\n  // (must be ancestor of inserted node)\n  // therefore, last traveled node is correct.\n  var yIndex = traveledNodes.length - 2;\n  var y = traveledNodes[yIndex];\n\n  // x should be tallest child of y\n  // If children same height, x should be ancestor\n  // of inserted node (in traveled path)\n  var x;\n  if (y.left !== null && y.right !== null) {\n    if (y.left.height > y.right.height) {\n      x = y.left;\n    } else if (y.left.height < y.right.height) {\n      x = y.right;\n    } else if (y.left.height === y.right.height) {\n      var xIndex = traveledNodes.length - 3;\n      x = traveledNodes[xIndex];\n    }\n  } else if (y.left !== null && y.right === null) {\n    x = y.left;\n  } else if (y.right !== null && y.left === null) {\n    x = y.right;\n  }\n  return [x, y, z];\n};\n\n/**\n * Keep the height balance property by walking to\n * root and checking for invalid heights.\n */\nAVLTree.prototype.keepHeightBalance = function (node, afterRemove) {\n  var current = node;\n  var traveledNodes = [];\n  while (current !== null) {\n    traveledNodes.push(current);\n    current.height = this.getNodeHeight(current);\n    if (!this.isNodeBalanced(current)) {\n      var nodesToBeRestructured = (afterRemove) ?\n        this.getNodesToRestructureAfterRemove(traveledNodes) :\n        this.getNodesToRestructureAfterInsert(traveledNodes);\n      this.restructure(nodesToBeRestructured);\n    }\n    current = current.parent;\n  }\n};\n\n/**\n * Identifies and calls the appropriate pattern\n * rotator.\n */\nAVLTree.prototype.restructure = function (nodesToRestructure) {\n  var x = nodesToRestructure[0];\n  var y = nodesToRestructure[1];\n  var z = nodesToRestructure[2];\n\n  // Determine Rotation Pattern\n  if (z.right === y && y.right === x) {\n    this.rightRight(x, y, z);\n  } else if (z.left === y && y.left === x) {\n    this.leftLeft(x, y, z);\n  } else if (z.right === y && y.left === x) {\n    this.rightLeft(x, y, z);\n  } else if (z.left === y && y.right === x) {\n    this.leftRight(x, y, z);\n  }\n};\n\n/**\n * Right-right rotation pattern.\n */\nAVLTree.prototype.rightRight = function (x, y, z) {\n  // pass z parent to y and move y's left to z's right\n  if (z.parent !== null) {\n    var orientation = (z.parent.left === z) ? 'left' : 'right';\n    z.parent[orientation] = y;\n    y.parent = z.parent;\n  } else {\n    this.root = y;\n    y.parent = null;\n  }\n\n  // z adopts y's left.\n  z.right = y.left;\n  if (z.right !== null) {\n    z.right.parent = z;\n  }\n  // y adopts z\n  y.left = z;\n  z.parent = y;\n\n  // Correct each nodes height - order matters, children first\n  x.height = this.getNodeHeight(x);\n  z.height = this.getNodeHeight(z);\n  y.height = this.getNodeHeight(y);\n};\n\n/**\n * Left-left rotation pattern.\n */\nAVLTree.prototype.leftLeft = function (x, y, z) {\n  //pass z parent to y and move y's right to z's left\n  if (z.parent !== null) {\n    var orientation = (z.parent.left === z) ? 'left' : 'right';\n    z.parent[orientation] = y;\n    y.parent = z.parent;\n  } else {\n    this.root = y;\n    y.parent = null;\n  }\n\n  z.left = y.right;\n  if (z.left !== null) {\n    z.left.parent = z;\n  }\n  //fix y right child\n  y.right = z;\n  z.parent = y;\n\n  // Correct each nodes height - order matters, children first\n  x.height = this.getNodeHeight(x);\n  z.height = this.getNodeHeight(z);\n  y.height = this.getNodeHeight(y);\n};\n\n/**\n * Right-left rotation pattern.\n */\nAVLTree.prototype.rightLeft = function (x, y, z) {\n  //pass z parent to x\n  if (z.parent !== null) {\n    var orientation = (z.parent.left === z) ? 'left' : 'right';\n    z.parent[orientation] = x;\n    x.parent = z.parent;\n  } else {\n    this.root = x;\n    x.parent = null;\n  }\n\n  // Adoptions\n  z.right = x.left;\n  if (z.right !== null) {\n    z.right.parent = z;\n  }\n  y.left = x.right;\n  if (y.left !== null) {\n    y.left.parent = y;\n  }\n\n  // Point to new children (x new parent)\n  x.left = z;\n  x.right = y;\n  x.left.parent = x;\n  x.right.parent = x;\n\n  // Correct each nodes height - order matters, children first\n  y.height = this.getNodeHeight(y);\n  z.height = this.getNodeHeight(z);\n  x.height = this.getNodeHeight(x);\n};\n\n/**\n * Left-right rotation pattern.\n */\nAVLTree.prototype.leftRight = function (x, y, z) {\n  //pass z parent to x\n  if (z.parent !== null) {\n    var orientation = (z.parent.left === z) ? 'left' : 'right';\n    z.parent[orientation] = x;\n    x.parent = z.parent;\n  } else {\n    this.root = x;\n    x.parent = null;\n  }\n\n  // Adoptions\n  z.left = x.right;\n  if (z.left !== null) {\n    z.left.parent = z;\n  }\n  y.right = x.left;\n  if (y.right !== null) {\n    y.right.parent = y;\n  }\n\n  // Point to new children (x new parent)\n  x.right = z;\n  x.left = y;\n  x.left.parent = x;\n  x.right.parent = x;\n\n  // Correct each nodes height - order matters, children first\n  y.height = this.getNodeHeight(y);\n  z.height = this.getNodeHeight(z);\n  x.height = this.getNodeHeight(x);\n};\n\n/**\n * Inserts a value as a Node of an AVL Tree.\n */\nAVLTree.prototype.insert = function (value, current) {\n  if (this.root === null) {\n    this.root = new Node(value, null, null, null, 1);\n    this.keepHeightBalance(this.root);\n    return;\n  }\n\n  var insertKey;\n  current = current || this.root;\n  if (current.value > value) {\n    insertKey = 'left';\n  } else {\n    insertKey = 'right';\n  }\n\n  if (!current[insertKey]) {\n    current[insertKey] = new Node(value, null, null, current);\n    this.keepHeightBalance(current[insertKey], false);\n  } else {\n    this.insert(value, current[insertKey]);\n  }\n};\n\n/**\n * In-order traversal from the given node.\n */\nAVLTree.prototype.inOrder = function (current, callback) {\n  if (!current) {\n    return;\n  }\n  this.inOrder(current.left, callback);\n  if (typeof callback === 'function') {\n    callback(current);\n  }\n  this.inOrder(current.right, callback);\n};\n\n/**\n * Post-order traversal from the given node.\n */\nAVLTree.prototype.postOrder = function (current, callback) {\n  if (!current) {\n    return;\n  }\n\n  this.postOrder(current.left, callback);\n  this.postOrder(current.right, callback);\n  if (typeof callback === 'function') {\n    callback(current);\n  }\n};\n\n/**\n * Pre-order traversal from the given node.\n */\nAVLTree.prototype.preOrder = function (current, callback) {\n  if (!current) {\n    return;\n  }\n  if (typeof callback === 'function') {\n    callback(current);\n  }\n  this.preOrder(current.left, callback);\n  this.preOrder(current.right, callback);\n};\n\n/**\n * Finds a node by its value.\n */\nAVLTree.prototype.find = function (value) {\n  return this._find(value, this.root);\n};\n\n/**\n * Finds a node by its value in the given sub-tree.\n */\nAVLTree.prototype._find = function (value, current) {\n  if (!current) {\n    return null;\n  }\n\n  var node;\n  if (current.value === value) {\n    node = current;\n  } else if (current.value > value) {\n    node = this._find(value, current.left);\n  } else if (current.value < value) {\n    node = this._find(value, current.right);\n  }\n\n  return node;\n};\n\n/**\n * Replaces the given child with the new one,\n * for the given parent.\n */\nAVLTree.prototype.replaceChild = function (parent, oldChild, newChild) {\n  if (parent === null) {\n    this.root = newChild;\n    if (this.root !== null) {\n      this.root.parent = null;\n    }\n  } else {\n    if (parent.left === oldChild) {\n      parent.left = newChild;\n    } else {\n      parent.right = newChild;\n    }\n    if (newChild) {\n      newChild.parent = parent;\n    }\n  }\n};\n\n/**\n * Removes a node by its value.\n */\nAVLTree.prototype.remove = function (value) {\n  var node = this.find(value);\n  if (!node) {\n    return false;\n  }\n\n  if (node.left && node.right) {\n    var min = this.findMin(node.right);\n    var temp = node.value;\n    node.value = min.value;\n    min.value = temp;\n    return this.remove(min);\n  } else if (node.left) {\n    this.replaceChild(node.parent, node, node.left);\n    this.keepHeightBalance(node.left, true);\n  } else if (node.right) {\n    this.replaceChild(node.parent, node, node.right);\n    this.keepHeightBalance(node.right, true);\n  } else {\n    this.replaceChild(node.parent, node, null);\n    this.keepHeightBalance(node.parent, true);\n  }\n  return true;\n};\n\n/**\n * Finds the node with minimum value in the given\n * sub-tree.\n */\nAVLTree.prototype._findMin = function (node, current) {\n  current = current || {\n    value: Infinity\n  };\n  if (!node) {\n    return current;\n  }\n  if (current.value > node.value) {\n    current = node;\n  }\n  return this._findMin(node.left, current);\n};\n\n/**\n * Finds the node with maximum value in the given\n * sub-tree.\n */\nAVLTree.prototype._findMax = function (node, current) {\n  current = current || {\n    value: -Infinity\n  };\n  if (!node) {\n    return current;\n  }\n  if (current.value < node.value) {\n    current = node;\n  }\n  return this._findMax(node.right, current);\n};\n\n/**\n * Finds the node with minimum value in the whole tree.\n */\nAVLTree.prototype.findMin = function () {\n  return this._findMin(this.root);\n};\n\n/**\n * Finds the node with maximum value in the whole tree.\n */\nAVLTree.prototype.findMax = function () {\n  return this._findMax(this.root);\n};\n\n/**\n * Verifies if the tree is balanced.\n */\nAVLTree.prototype.isTreeBalanced = function () {\n  var current = this.root;\n\n  if (!current) {\n    return true;\n  }\n  return this._isBalanced(current._left) &&\n    this._isBalanced(current._right) &&\n    Math.abs(this._getNodeHeight(current._left) -\n      this._getNodeHeight(current._right)) <= 1;\n};\n\n/**\n * Calculates the height of the tree based on height\n * property.\n */\nAVLTree.prototype.getTreeHeight = function () {\n  var current = this.root;\n\n  if (!current) {\n    return 0;\n  }\n  return 1 + Math.max(this.getNodeHeight(current._left),\n    this._getNodeHeight(current._right));\n};\n\nmodule.exports = AVLTree;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/algorithms/data_structures/avl_tree.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}}],"sources":{"node_modules/algorithms/data_structures/avl_tree.js":"'use strict';\n\n/**\n * AVL Tree\n */\nfunction AVLTree() {\n  this.root = null;\n}\n\n/**\n * Tree node\n */\nfunction Node(value, left, right, parent, height) {\n  this.value = value;\n  this.left = left;\n  this.right = right;\n  this.parent = parent;\n  this.height = height;\n}\n\n/**\n * Calculates the height of a node based on height\n * property of all his children.\n */\nAVLTree.prototype.getNodeHeight = function (node) {\n  var height = 1;\n  if (node.left !== null && node.right !== null) {\n    height = Math.max(node.left.height, node.right.height) + 1;\n  } else if (node.left !== null) {\n    height = node.left.height + 1;\n  } else if (node.right !== null) {\n    height = node.right.height + 1;\n  }\n  return height;\n};\n\n/**\n * Verifies if the given node is balanced.\n */\nAVLTree.prototype.isNodeBalanced = function (node) {\n  var isBalanced = true;\n\n  if (node.left !== null && node.right !== null) {\n    isBalanced = (Math.abs(node.left.height - node.right.height) <= 1);\n  } else if (node.right !== null && node.left === null) {\n    isBalanced = node.right.height < 2;\n  } else if (node.left !== null && node.right === null) {\n    isBalanced = node.left.height < 2;\n  }\n  return isBalanced;\n};\n\n/**\n * When a removal happens, some nodes need to be\n * restructured. Gets and return these nodes.\n */\nAVLTree.prototype.getNodesToRestructureAfterRemove = function (traveledNodes) {\n  // z is last traveled node - imbalance found at z\n  var zIndex = traveledNodes.length - 1;\n  var z = traveledNodes[zIndex];\n\n  // y should be child of z with larger height\n  // (cannot be ancestor of removed node)\n  var y;\n  if (z.left !== null && z.right !== null) {\n    y = (z.left === y) ? z.right : z.left;\n  } else if (z.left !== null && z.right === null) {\n    y = z.left;\n  } else if (z.right !== null && z.left === null) {\n    y = z.right;\n  }\n\n  // x should be tallest child of y\n  // If children same height, x should be child of y\n  // that has same orientation as z to y\n  var x;\n  if (y.left !== null && y.right !== null) {\n    if (y.left.height > y.right.height) {\n      x = y.left;\n    } else if (y.left.height < y.right.height) {\n      x = y.right;\n    } else if (y.left.height === y.right.height) {\n      x = (z.left === y) ? y.left : y.right;\n    }\n  } else if (y.left !== null && y.right === null) {\n    x = y.left;\n  } else if (y.right !== null && y.left === null) {\n    x = y.right;\n  }\n  return [x, y, z];\n};\n\n/**\n * When a insertion happens, some nodes need to be\n * restructured. Gets and return these nodes.\n */\nAVLTree.prototype.getNodesToRestructureAfterInsert = function (traveledNodes) {\n  // z is last traveled node - imbalance found at z\n  var zIndex = traveledNodes.length - 1;\n  var z = traveledNodes[zIndex];\n\n  // y should be child of z with larger height\n  // (must be ancestor of inserted node)\n  // therefore, last traveled node is correct.\n  var yIndex = traveledNodes.length - 2;\n  var y = traveledNodes[yIndex];\n\n  // x should be tallest child of y\n  // If children same height, x should be ancestor\n  // of inserted node (in traveled path)\n  var x;\n  if (y.left !== null && y.right !== null) {\n    if (y.left.height > y.right.height) {\n      x = y.left;\n    } else if (y.left.height < y.right.height) {\n      x = y.right;\n    } else if (y.left.height === y.right.height) {\n      var xIndex = traveledNodes.length - 3;\n      x = traveledNodes[xIndex];\n    }\n  } else if (y.left !== null && y.right === null) {\n    x = y.left;\n  } else if (y.right !== null && y.left === null) {\n    x = y.right;\n  }\n  return [x, y, z];\n};\n\n/**\n * Keep the height balance property by walking to\n * root and checking for invalid heights.\n */\nAVLTree.prototype.keepHeightBalance = function (node, afterRemove) {\n  var current = node;\n  var traveledNodes = [];\n  while (current !== null) {\n    traveledNodes.push(current);\n    current.height = this.getNodeHeight(current);\n    if (!this.isNodeBalanced(current)) {\n      var nodesToBeRestructured = (afterRemove) ?\n        this.getNodesToRestructureAfterRemove(traveledNodes) :\n        this.getNodesToRestructureAfterInsert(traveledNodes);\n      this.restructure(nodesToBeRestructured);\n    }\n    current = current.parent;\n  }\n};\n\n/**\n * Identifies and calls the appropriate pattern\n * rotator.\n */\nAVLTree.prototype.restructure = function (nodesToRestructure) {\n  var x = nodesToRestructure[0];\n  var y = nodesToRestructure[1];\n  var z = nodesToRestructure[2];\n\n  // Determine Rotation Pattern\n  if (z.right === y && y.right === x) {\n    this.rightRight(x, y, z);\n  } else if (z.left === y && y.left === x) {\n    this.leftLeft(x, y, z);\n  } else if (z.right === y && y.left === x) {\n    this.rightLeft(x, y, z);\n  } else if (z.left === y && y.right === x) {\n    this.leftRight(x, y, z);\n  }\n};\n\n/**\n * Right-right rotation pattern.\n */\nAVLTree.prototype.rightRight = function (x, y, z) {\n  // pass z parent to y and move y's left to z's right\n  if (z.parent !== null) {\n    var orientation = (z.parent.left === z) ? 'left' : 'right';\n    z.parent[orientation] = y;\n    y.parent = z.parent;\n  } else {\n    this.root = y;\n    y.parent = null;\n  }\n\n  // z adopts y's left.\n  z.right = y.left;\n  if (z.right !== null) {\n    z.right.parent = z;\n  }\n  // y adopts z\n  y.left = z;\n  z.parent = y;\n\n  // Correct each nodes height - order matters, children first\n  x.height = this.getNodeHeight(x);\n  z.height = this.getNodeHeight(z);\n  y.height = this.getNodeHeight(y);\n};\n\n/**\n * Left-left rotation pattern.\n */\nAVLTree.prototype.leftLeft = function (x, y, z) {\n  //pass z parent to y and move y's right to z's left\n  if (z.parent !== null) {\n    var orientation = (z.parent.left === z) ? 'left' : 'right';\n    z.parent[orientation] = y;\n    y.parent = z.parent;\n  } else {\n    this.root = y;\n    y.parent = null;\n  }\n\n  z.left = y.right;\n  if (z.left !== null) {\n    z.left.parent = z;\n  }\n  //fix y right child\n  y.right = z;\n  z.parent = y;\n\n  // Correct each nodes height - order matters, children first\n  x.height = this.getNodeHeight(x);\n  z.height = this.getNodeHeight(z);\n  y.height = this.getNodeHeight(y);\n};\n\n/**\n * Right-left rotation pattern.\n */\nAVLTree.prototype.rightLeft = function (x, y, z) {\n  //pass z parent to x\n  if (z.parent !== null) {\n    var orientation = (z.parent.left === z) ? 'left' : 'right';\n    z.parent[orientation] = x;\n    x.parent = z.parent;\n  } else {\n    this.root = x;\n    x.parent = null;\n  }\n\n  // Adoptions\n  z.right = x.left;\n  if (z.right !== null) {\n    z.right.parent = z;\n  }\n  y.left = x.right;\n  if (y.left !== null) {\n    y.left.parent = y;\n  }\n\n  // Point to new children (x new parent)\n  x.left = z;\n  x.right = y;\n  x.left.parent = x;\n  x.right.parent = x;\n\n  // Correct each nodes height - order matters, children first\n  y.height = this.getNodeHeight(y);\n  z.height = this.getNodeHeight(z);\n  x.height = this.getNodeHeight(x);\n};\n\n/**\n * Left-right rotation pattern.\n */\nAVLTree.prototype.leftRight = function (x, y, z) {\n  //pass z parent to x\n  if (z.parent !== null) {\n    var orientation = (z.parent.left === z) ? 'left' : 'right';\n    z.parent[orientation] = x;\n    x.parent = z.parent;\n  } else {\n    this.root = x;\n    x.parent = null;\n  }\n\n  // Adoptions\n  z.left = x.right;\n  if (z.left !== null) {\n    z.left.parent = z;\n  }\n  y.right = x.left;\n  if (y.right !== null) {\n    y.right.parent = y;\n  }\n\n  // Point to new children (x new parent)\n  x.right = z;\n  x.left = y;\n  x.left.parent = x;\n  x.right.parent = x;\n\n  // Correct each nodes height - order matters, children first\n  y.height = this.getNodeHeight(y);\n  z.height = this.getNodeHeight(z);\n  x.height = this.getNodeHeight(x);\n};\n\n/**\n * Inserts a value as a Node of an AVL Tree.\n */\nAVLTree.prototype.insert = function (value, current) {\n  if (this.root === null) {\n    this.root = new Node(value, null, null, null, 1);\n    this.keepHeightBalance(this.root);\n    return;\n  }\n\n  var insertKey;\n  current = current || this.root;\n  if (current.value > value) {\n    insertKey = 'left';\n  } else {\n    insertKey = 'right';\n  }\n\n  if (!current[insertKey]) {\n    current[insertKey] = new Node(value, null, null, current);\n    this.keepHeightBalance(current[insertKey], false);\n  } else {\n    this.insert(value, current[insertKey]);\n  }\n};\n\n/**\n * In-order traversal from the given node.\n */\nAVLTree.prototype.inOrder = function (current, callback) {\n  if (!current) {\n    return;\n  }\n  this.inOrder(current.left, callback);\n  if (typeof callback === 'function') {\n    callback(current);\n  }\n  this.inOrder(current.right, callback);\n};\n\n/**\n * Post-order traversal from the given node.\n */\nAVLTree.prototype.postOrder = function (current, callback) {\n  if (!current) {\n    return;\n  }\n\n  this.postOrder(current.left, callback);\n  this.postOrder(current.right, callback);\n  if (typeof callback === 'function') {\n    callback(current);\n  }\n};\n\n/**\n * Pre-order traversal from the given node.\n */\nAVLTree.prototype.preOrder = function (current, callback) {\n  if (!current) {\n    return;\n  }\n  if (typeof callback === 'function') {\n    callback(current);\n  }\n  this.preOrder(current.left, callback);\n  this.preOrder(current.right, callback);\n};\n\n/**\n * Finds a node by its value.\n */\nAVLTree.prototype.find = function (value) {\n  return this._find(value, this.root);\n};\n\n/**\n * Finds a node by its value in the given sub-tree.\n */\nAVLTree.prototype._find = function (value, current) {\n  if (!current) {\n    return null;\n  }\n\n  var node;\n  if (current.value === value) {\n    node = current;\n  } else if (current.value > value) {\n    node = this._find(value, current.left);\n  } else if (current.value < value) {\n    node = this._find(value, current.right);\n  }\n\n  return node;\n};\n\n/**\n * Replaces the given child with the new one,\n * for the given parent.\n */\nAVLTree.prototype.replaceChild = function (parent, oldChild, newChild) {\n  if (parent === null) {\n    this.root = newChild;\n    if (this.root !== null) {\n      this.root.parent = null;\n    }\n  } else {\n    if (parent.left === oldChild) {\n      parent.left = newChild;\n    } else {\n      parent.right = newChild;\n    }\n    if (newChild) {\n      newChild.parent = parent;\n    }\n  }\n};\n\n/**\n * Removes a node by its value.\n */\nAVLTree.prototype.remove = function (value) {\n  var node = this.find(value);\n  if (!node) {\n    return false;\n  }\n\n  if (node.left && node.right) {\n    var min = this.findMin(node.right);\n    var temp = node.value;\n    node.value = min.value;\n    min.value = temp;\n    return this.remove(min);\n  } else if (node.left) {\n    this.replaceChild(node.parent, node, node.left);\n    this.keepHeightBalance(node.left, true);\n  } else if (node.right) {\n    this.replaceChild(node.parent, node, node.right);\n    this.keepHeightBalance(node.right, true);\n  } else {\n    this.replaceChild(node.parent, node, null);\n    this.keepHeightBalance(node.parent, true);\n  }\n  return true;\n};\n\n/**\n * Finds the node with minimum value in the given\n * sub-tree.\n */\nAVLTree.prototype._findMin = function (node, current) {\n  current = current || {\n    value: Infinity\n  };\n  if (!node) {\n    return current;\n  }\n  if (current.value > node.value) {\n    current = node;\n  }\n  return this._findMin(node.left, current);\n};\n\n/**\n * Finds the node with maximum value in the given\n * sub-tree.\n */\nAVLTree.prototype._findMax = function (node, current) {\n  current = current || {\n    value: -Infinity\n  };\n  if (!node) {\n    return current;\n  }\n  if (current.value < node.value) {\n    current = node;\n  }\n  return this._findMax(node.right, current);\n};\n\n/**\n * Finds the node with minimum value in the whole tree.\n */\nAVLTree.prototype.findMin = function () {\n  return this._findMin(this.root);\n};\n\n/**\n * Finds the node with maximum value in the whole tree.\n */\nAVLTree.prototype.findMax = function () {\n  return this._findMax(this.root);\n};\n\n/**\n * Verifies if the tree is balanced.\n */\nAVLTree.prototype.isTreeBalanced = function () {\n  var current = this.root;\n\n  if (!current) {\n    return true;\n  }\n  return this._isBalanced(current._left) &&\n    this._isBalanced(current._right) &&\n    Math.abs(this._getNodeHeight(current._left) -\n      this._getNodeHeight(current._right)) <= 1;\n};\n\n/**\n * Calculates the height of the tree based on height\n * property.\n */\nAVLTree.prototype.getTreeHeight = function () {\n  var current = this.root;\n\n  if (!current) {\n    return 0;\n  }\n  return 1 + Math.max(this.getNodeHeight(current._left),\n    this._getNodeHeight(current._right));\n};\n\nmodule.exports = AVLTree;\n"},"lineCount":523}},"error":null,"hash":"3dc2100a0f561257c5d30f42b048207f","cacheData":{"env":{}}}